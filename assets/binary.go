// Code generated by go-bindata.
// sources:
// _embed/templates/base.tmpl
// _embed/templates/editor.tmpl
// _embed/templates/frontmatter.tmpl
// _embed/templates/listing.tmpl
// _embed/templates/minimal.tmpl
// _embed/templates/single.tmpl
// _embed/public/js/common.js
// _embed/public/js/editor.js
// _embed/public/js/form2js.js
// _embed/public/js/listing.js
// _embed/public/css/fonts.css
// _embed/public/css/material/icons.woff2
// _embed/public/css/normalize.css
// _embed/public/css/roboto/medium-cyrillic-ext.woff2
// _embed/public/css/roboto/medium-cyrillic.woff2
// _embed/public/css/roboto/medium-greek-ext.woff2
// _embed/public/css/roboto/medium-greek.woff2
// _embed/public/css/roboto/medium-latin-ext.woff2
// _embed/public/css/roboto/medium-latin.woff2
// _embed/public/css/roboto/medium-vietnamese.woff2
// _embed/public/css/roboto/normal-cyrillic-ext.woff2
// _embed/public/css/roboto/normal-cyrillic.woff2
// _embed/public/css/roboto/normal-greek-ext.woff2
// _embed/public/css/roboto/normal-greek.woff2
// _embed/public/css/roboto/normal-latin-ext.woff2
// _embed/public/css/roboto/normal-latin.woff2
// _embed/public/css/roboto/normal-vietnamese.woff2
// _embed/public/css/styles.css
// _embed/public/ace/src-min/ace.js
// _embed/public/ace/src-min/ext-beautify.js
// _embed/public/ace/src-min/ext-chromevox.js
// _embed/public/ace/src-min/ext-elastic_tabstops_lite.js
// _embed/public/ace/src-min/ext-emmet.js
// _embed/public/ace/src-min/ext-error_marker.js
// _embed/public/ace/src-min/ext-keybinding_menu.js
// _embed/public/ace/src-min/ext-language_tools.js
// _embed/public/ace/src-min/ext-linking.js
// _embed/public/ace/src-min/ext-modelist.js
// _embed/public/ace/src-min/ext-old_ie.js
// _embed/public/ace/src-min/ext-searchbox.js
// _embed/public/ace/src-min/ext-settings_menu.js
// _embed/public/ace/src-min/ext-spellcheck.js
// _embed/public/ace/src-min/ext-split.js
// _embed/public/ace/src-min/ext-static_highlight.js
// _embed/public/ace/src-min/ext-statusbar.js
// _embed/public/ace/src-min/ext-textarea.js
// _embed/public/ace/src-min/ext-themelist.js
// _embed/public/ace/src-min/ext-whitespace.js
// _embed/public/ace/src-min/keybinding-emacs.js
// _embed/public/ace/src-min/keybinding-vim.js
// _embed/public/ace/src-min/mode-abap.js
// _embed/public/ace/src-min/mode-abc.js
// _embed/public/ace/src-min/mode-actionscript.js
// _embed/public/ace/src-min/mode-ada.js
// _embed/public/ace/src-min/mode-apache_conf.js
// _embed/public/ace/src-min/mode-applescript.js
// _embed/public/ace/src-min/mode-asciidoc.js
// _embed/public/ace/src-min/mode-assembly_x86.js
// _embed/public/ace/src-min/mode-autohotkey.js
// _embed/public/ace/src-min/mode-batchfile.js
// _embed/public/ace/src-min/mode-bro.js
// _embed/public/ace/src-min/mode-c9search.js
// _embed/public/ace/src-min/mode-c_cpp.js
// _embed/public/ace/src-min/mode-cirru.js
// _embed/public/ace/src-min/mode-clojure.js
// _embed/public/ace/src-min/mode-cobol.js
// _embed/public/ace/src-min/mode-coffee.js
// _embed/public/ace/src-min/mode-coldfusion.js
// _embed/public/ace/src-min/mode-csharp.js
// _embed/public/ace/src-min/mode-css.js
// _embed/public/ace/src-min/mode-curly.js
// _embed/public/ace/src-min/mode-d.js
// _embed/public/ace/src-min/mode-dart.js
// _embed/public/ace/src-min/mode-diff.js
// _embed/public/ace/src-min/mode-django.js
// _embed/public/ace/src-min/mode-dockerfile.js
// _embed/public/ace/src-min/mode-dot.js
// _embed/public/ace/src-min/mode-drools.js
// _embed/public/ace/src-min/mode-eiffel.js
// _embed/public/ace/src-min/mode-ejs.js
// _embed/public/ace/src-min/mode-elixir.js
// _embed/public/ace/src-min/mode-elm.js
// _embed/public/ace/src-min/mode-erlang.js
// _embed/public/ace/src-min/mode-forth.js
// _embed/public/ace/src-min/mode-fortran.js
// _embed/public/ace/src-min/mode-ftl.js
// _embed/public/ace/src-min/mode-gcode.js
// _embed/public/ace/src-min/mode-gherkin.js
// _embed/public/ace/src-min/mode-gitignore.js
// _embed/public/ace/src-min/mode-glsl.js
// _embed/public/ace/src-min/mode-gobstones.js
// _embed/public/ace/src-min/mode-golang.js
// _embed/public/ace/src-min/mode-groovy.js
// _embed/public/ace/src-min/mode-haml.js
// _embed/public/ace/src-min/mode-handlebars.js
// _embed/public/ace/src-min/mode-haskell.js
// _embed/public/ace/src-min/mode-haskell_cabal.js
// _embed/public/ace/src-min/mode-haxe.js
// _embed/public/ace/src-min/mode-hjson.js
// _embed/public/ace/src-min/mode-html.js
// _embed/public/ace/src-min/mode-html_elixir.js
// _embed/public/ace/src-min/mode-html_ruby.js
// _embed/public/ace/src-min/mode-ini.js
// _embed/public/ace/src-min/mode-io.js
// _embed/public/ace/src-min/mode-jack.js
// _embed/public/ace/src-min/mode-jade.js
// _embed/public/ace/src-min/mode-java.js
// _embed/public/ace/src-min/mode-javascript.js
// _embed/public/ace/src-min/mode-json.js
// _embed/public/ace/src-min/mode-jsoniq.js
// _embed/public/ace/src-min/mode-jsp.js
// _embed/public/ace/src-min/mode-jsx.js
// _embed/public/ace/src-min/mode-julia.js
// _embed/public/ace/src-min/mode-kotlin.js
// _embed/public/ace/src-min/mode-latex.js
// _embed/public/ace/src-min/mode-lean.js
// _embed/public/ace/src-min/mode-less.js
// _embed/public/ace/src-min/mode-liquid.js
// _embed/public/ace/src-min/mode-lisp.js
// _embed/public/ace/src-min/mode-live_script.js
// _embed/public/ace/src-min/mode-livescript.js
// _embed/public/ace/src-min/mode-logiql.js
// _embed/public/ace/src-min/mode-lsl.js
// _embed/public/ace/src-min/mode-lua.js
// _embed/public/ace/src-min/mode-luapage.js
// _embed/public/ace/src-min/mode-lucene.js
// _embed/public/ace/src-min/mode-makefile.js
// _embed/public/ace/src-min/mode-markdown.js
// _embed/public/ace/src-min/mode-mask.js
// _embed/public/ace/src-min/mode-matlab.js
// _embed/public/ace/src-min/mode-maze.js
// _embed/public/ace/src-min/mode-mel.js
// _embed/public/ace/src-min/mode-mips_assembler.js
// _embed/public/ace/src-min/mode-mipsassembler.js
// _embed/public/ace/src-min/mode-mushcode.js
// _embed/public/ace/src-min/mode-mysql.js
// _embed/public/ace/src-min/mode-nix.js
// _embed/public/ace/src-min/mode-nsis.js
// _embed/public/ace/src-min/mode-objectivec.js
// _embed/public/ace/src-min/mode-ocaml.js
// _embed/public/ace/src-min/mode-pascal.js
// _embed/public/ace/src-min/mode-perl.js
// _embed/public/ace/src-min/mode-pgsql.js
// _embed/public/ace/src-min/mode-php.js
// _embed/public/ace/src-min/mode-plain_text.js
// _embed/public/ace/src-min/mode-powershell.js
// _embed/public/ace/src-min/mode-praat.js
// _embed/public/ace/src-min/mode-prolog.js
// _embed/public/ace/src-min/mode-properties.js
// _embed/public/ace/src-min/mode-protobuf.js
// _embed/public/ace/src-min/mode-python.js
// _embed/public/ace/src-min/mode-r.js
// _embed/public/ace/src-min/mode-razor.js
// _embed/public/ace/src-min/mode-rdoc.js
// _embed/public/ace/src-min/mode-rhtml.js
// _embed/public/ace/src-min/mode-rst.js
// _embed/public/ace/src-min/mode-ruby.js
// _embed/public/ace/src-min/mode-rust.js
// _embed/public/ace/src-min/mode-sass.js
// _embed/public/ace/src-min/mode-scad.js
// _embed/public/ace/src-min/mode-scala.js
// _embed/public/ace/src-min/mode-scheme.js
// _embed/public/ace/src-min/mode-scss.js
// _embed/public/ace/src-min/mode-sh.js
// _embed/public/ace/src-min/mode-sjs.js
// _embed/public/ace/src-min/mode-smarty.js
// _embed/public/ace/src-min/mode-snippets.js
// _embed/public/ace/src-min/mode-soy_template.js
// _embed/public/ace/src-min/mode-space.js
// _embed/public/ace/src-min/mode-sql.js
// _embed/public/ace/src-min/mode-sqlserver.js
// _embed/public/ace/src-min/mode-stylus.js
// _embed/public/ace/src-min/mode-svg.js
// _embed/public/ace/src-min/mode-swift.js
// _embed/public/ace/src-min/mode-swig.js
// _embed/public/ace/src-min/mode-tcl.js
// _embed/public/ace/src-min/mode-tex.js
// _embed/public/ace/src-min/mode-text.js
// _embed/public/ace/src-min/mode-textile.js
// _embed/public/ace/src-min/mode-toml.js
// _embed/public/ace/src-min/mode-tsx.js
// _embed/public/ace/src-min/mode-twig.js
// _embed/public/ace/src-min/mode-typescript.js
// _embed/public/ace/src-min/mode-vala.js
// _embed/public/ace/src-min/mode-vbscript.js
// _embed/public/ace/src-min/mode-velocity.js
// _embed/public/ace/src-min/mode-verilog.js
// _embed/public/ace/src-min/mode-vhdl.js
// _embed/public/ace/src-min/mode-wollok.js
// _embed/public/ace/src-min/mode-xml.js
// _embed/public/ace/src-min/mode-xquery.js
// _embed/public/ace/src-min/mode-yaml.js
// _embed/public/ace/src-min/snippets/abap.js
// _embed/public/ace/src-min/snippets/abc.js
// _embed/public/ace/src-min/snippets/actionscript.js
// _embed/public/ace/src-min/snippets/ada.js
// _embed/public/ace/src-min/snippets/apache_conf.js
// _embed/public/ace/src-min/snippets/applescript.js
// _embed/public/ace/src-min/snippets/asciidoc.js
// _embed/public/ace/src-min/snippets/assembly_x86.js
// _embed/public/ace/src-min/snippets/autohotkey.js
// _embed/public/ace/src-min/snippets/batchfile.js
// _embed/public/ace/src-min/snippets/bro.js
// _embed/public/ace/src-min/snippets/c9search.js
// _embed/public/ace/src-min/snippets/c_cpp.js
// _embed/public/ace/src-min/snippets/cirru.js
// _embed/public/ace/src-min/snippets/clojure.js
// _embed/public/ace/src-min/snippets/cobol.js
// _embed/public/ace/src-min/snippets/coffee.js
// _embed/public/ace/src-min/snippets/coldfusion.js
// _embed/public/ace/src-min/snippets/csharp.js
// _embed/public/ace/src-min/snippets/css.js
// _embed/public/ace/src-min/snippets/curly.js
// _embed/public/ace/src-min/snippets/d.js
// _embed/public/ace/src-min/snippets/dart.js
// _embed/public/ace/src-min/snippets/diff.js
// _embed/public/ace/src-min/snippets/django.js
// _embed/public/ace/src-min/snippets/dockerfile.js
// _embed/public/ace/src-min/snippets/dot.js
// _embed/public/ace/src-min/snippets/drools.js
// _embed/public/ace/src-min/snippets/eiffel.js
// _embed/public/ace/src-min/snippets/ejs.js
// _embed/public/ace/src-min/snippets/elixir.js
// _embed/public/ace/src-min/snippets/elm.js
// _embed/public/ace/src-min/snippets/erlang.js
// _embed/public/ace/src-min/snippets/forth.js
// _embed/public/ace/src-min/snippets/fortran.js
// _embed/public/ace/src-min/snippets/ftl.js
// _embed/public/ace/src-min/snippets/gcode.js
// _embed/public/ace/src-min/snippets/gherkin.js
// _embed/public/ace/src-min/snippets/gitignore.js
// _embed/public/ace/src-min/snippets/glsl.js
// _embed/public/ace/src-min/snippets/gobstones.js
// _embed/public/ace/src-min/snippets/golang.js
// _embed/public/ace/src-min/snippets/groovy.js
// _embed/public/ace/src-min/snippets/haml.js
// _embed/public/ace/src-min/snippets/handlebars.js
// _embed/public/ace/src-min/snippets/haskell.js
// _embed/public/ace/src-min/snippets/haskell_cabal.js
// _embed/public/ace/src-min/snippets/haxe.js
// _embed/public/ace/src-min/snippets/hjson.js
// _embed/public/ace/src-min/snippets/html.js
// _embed/public/ace/src-min/snippets/html_elixir.js
// _embed/public/ace/src-min/snippets/html_ruby.js
// _embed/public/ace/src-min/snippets/ini.js
// _embed/public/ace/src-min/snippets/io.js
// _embed/public/ace/src-min/snippets/jack.js
// _embed/public/ace/src-min/snippets/jade.js
// _embed/public/ace/src-min/snippets/java.js
// _embed/public/ace/src-min/snippets/javascript.js
// _embed/public/ace/src-min/snippets/json.js
// _embed/public/ace/src-min/snippets/jsoniq.js
// _embed/public/ace/src-min/snippets/jsp.js
// _embed/public/ace/src-min/snippets/jsx.js
// _embed/public/ace/src-min/snippets/julia.js
// _embed/public/ace/src-min/snippets/kotlin.js
// _embed/public/ace/src-min/snippets/latex.js
// _embed/public/ace/src-min/snippets/lean.js
// _embed/public/ace/src-min/snippets/less.js
// _embed/public/ace/src-min/snippets/liquid.js
// _embed/public/ace/src-min/snippets/lisp.js
// _embed/public/ace/src-min/snippets/live_script.js
// _embed/public/ace/src-min/snippets/livescript.js
// _embed/public/ace/src-min/snippets/logiql.js
// _embed/public/ace/src-min/snippets/lsl.js
// _embed/public/ace/src-min/snippets/lua.js
// _embed/public/ace/src-min/snippets/luapage.js
// _embed/public/ace/src-min/snippets/lucene.js
// _embed/public/ace/src-min/snippets/makefile.js
// _embed/public/ace/src-min/snippets/markdown.js
// _embed/public/ace/src-min/snippets/mask.js
// _embed/public/ace/src-min/snippets/matlab.js
// _embed/public/ace/src-min/snippets/maze.js
// _embed/public/ace/src-min/snippets/mel.js
// _embed/public/ace/src-min/snippets/mips_assembler.js
// _embed/public/ace/src-min/snippets/mipsassembler.js
// _embed/public/ace/src-min/snippets/mushcode.js
// _embed/public/ace/src-min/snippets/mysql.js
// _embed/public/ace/src-min/snippets/nix.js
// _embed/public/ace/src-min/snippets/nsis.js
// _embed/public/ace/src-min/snippets/objectivec.js
// _embed/public/ace/src-min/snippets/ocaml.js
// _embed/public/ace/src-min/snippets/pascal.js
// _embed/public/ace/src-min/snippets/perl.js
// _embed/public/ace/src-min/snippets/pgsql.js
// _embed/public/ace/src-min/snippets/php.js
// _embed/public/ace/src-min/snippets/plain_text.js
// _embed/public/ace/src-min/snippets/powershell.js
// _embed/public/ace/src-min/snippets/praat.js
// _embed/public/ace/src-min/snippets/prolog.js
// _embed/public/ace/src-min/snippets/properties.js
// _embed/public/ace/src-min/snippets/protobuf.js
// _embed/public/ace/src-min/snippets/python.js
// _embed/public/ace/src-min/snippets/r.js
// _embed/public/ace/src-min/snippets/razor.js
// _embed/public/ace/src-min/snippets/rdoc.js
// _embed/public/ace/src-min/snippets/rhtml.js
// _embed/public/ace/src-min/snippets/rst.js
// _embed/public/ace/src-min/snippets/ruby.js
// _embed/public/ace/src-min/snippets/rust.js
// _embed/public/ace/src-min/snippets/sass.js
// _embed/public/ace/src-min/snippets/scad.js
// _embed/public/ace/src-min/snippets/scala.js
// _embed/public/ace/src-min/snippets/scheme.js
// _embed/public/ace/src-min/snippets/scss.js
// _embed/public/ace/src-min/snippets/sh.js
// _embed/public/ace/src-min/snippets/sjs.js
// _embed/public/ace/src-min/snippets/smarty.js
// _embed/public/ace/src-min/snippets/snippets.js
// _embed/public/ace/src-min/snippets/soy_template.js
// _embed/public/ace/src-min/snippets/space.js
// _embed/public/ace/src-min/snippets/sql.js
// _embed/public/ace/src-min/snippets/sqlserver.js
// _embed/public/ace/src-min/snippets/stylus.js
// _embed/public/ace/src-min/snippets/svg.js
// _embed/public/ace/src-min/snippets/swift.js
// _embed/public/ace/src-min/snippets/swig.js
// _embed/public/ace/src-min/snippets/tcl.js
// _embed/public/ace/src-min/snippets/tex.js
// _embed/public/ace/src-min/snippets/text.js
// _embed/public/ace/src-min/snippets/textile.js
// _embed/public/ace/src-min/snippets/toml.js
// _embed/public/ace/src-min/snippets/tsx.js
// _embed/public/ace/src-min/snippets/twig.js
// _embed/public/ace/src-min/snippets/typescript.js
// _embed/public/ace/src-min/snippets/vala.js
// _embed/public/ace/src-min/snippets/vbscript.js
// _embed/public/ace/src-min/snippets/velocity.js
// _embed/public/ace/src-min/snippets/verilog.js
// _embed/public/ace/src-min/snippets/vhdl.js
// _embed/public/ace/src-min/snippets/wollok.js
// _embed/public/ace/src-min/snippets/xml.js
// _embed/public/ace/src-min/snippets/xquery.js
// _embed/public/ace/src-min/snippets/yaml.js
// _embed/public/ace/src-min/theme-github.js
// _embed/public/ace/src-min/worker-coffee.js
// _embed/public/ace/src-min/worker-css.js
// _embed/public/ace/src-min/worker-html.js
// _embed/public/ace/src-min/worker-javascript.js
// _embed/public/ace/src-min/worker-json.js
// _embed/public/ace/src-min/worker-lua.js
// _embed/public/ace/src-min/worker-php.js
// _embed/public/ace/src-min/worker-xml.js
// _embed/public/ace/src-min/worker-xquery.js
// DO NOT EDIT!

package assets

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// templatesBaseTmpl reads file data from disk. It returns an error on failure.
func templatesBaseTmpl() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\templates\\base.tmpl"
	name := "templates/base.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesEditorTmpl reads file data from disk. It returns an error on failure.
func templatesEditorTmpl() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\templates\\editor.tmpl"
	name := "templates/editor.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesFrontmatterTmpl reads file data from disk. It returns an error on failure.
func templatesFrontmatterTmpl() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\templates\\frontmatter.tmpl"
	name := "templates/frontmatter.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesListingTmpl reads file data from disk. It returns an error on failure.
func templatesListingTmpl() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\templates\\listing.tmpl"
	name := "templates/listing.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesMinimalTmpl reads file data from disk. It returns an error on failure.
func templatesMinimalTmpl() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\templates\\minimal.tmpl"
	name := "templates/minimal.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesSingleTmpl reads file data from disk. It returns an error on failure.
func templatesSingleTmpl() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\templates\\single.tmpl"
	name := "templates/single.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsCommonJs reads file data from disk. It returns an error on failure.
func publicJsCommonJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\js\\common.js"
	name := "public/js/common.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsEditorJs reads file data from disk. It returns an error on failure.
func publicJsEditorJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\js\\editor.js"
	name := "public/js/editor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsForm2jsJs reads file data from disk. It returns an error on failure.
func publicJsForm2jsJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\js\\form2js.js"
	name := "public/js/form2js.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicJsListingJs reads file data from disk. It returns an error on failure.
func publicJsListingJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\js\\listing.js"
	name := "public/js/listing.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssFontsCss reads file data from disk. It returns an error on failure.
func publicCssFontsCss() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\css\\fonts.css"
	name := "public/css/fonts.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssMaterialIconsWoff2 reads file data from disk. It returns an error on failure.
func publicCssMaterialIconsWoff2() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\css\\material\\icons.woff2"
	name := "public/css/material/icons.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssNormalizeCss reads file data from disk. It returns an error on failure.
func publicCssNormalizeCss() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\css\\normalize.css"
	name := "public/css/normalize.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssRobotoMediumCyrillicExtWoff2 reads file data from disk. It returns an error on failure.
func publicCssRobotoMediumCyrillicExtWoff2() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\css\\roboto\\medium-cyrillic-ext.woff2"
	name := "public/css/roboto/medium-cyrillic-ext.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssRobotoMediumCyrillicWoff2 reads file data from disk. It returns an error on failure.
func publicCssRobotoMediumCyrillicWoff2() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\css\\roboto\\medium-cyrillic.woff2"
	name := "public/css/roboto/medium-cyrillic.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssRobotoMediumGreekExtWoff2 reads file data from disk. It returns an error on failure.
func publicCssRobotoMediumGreekExtWoff2() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\css\\roboto\\medium-greek-ext.woff2"
	name := "public/css/roboto/medium-greek-ext.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssRobotoMediumGreekWoff2 reads file data from disk. It returns an error on failure.
func publicCssRobotoMediumGreekWoff2() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\css\\roboto\\medium-greek.woff2"
	name := "public/css/roboto/medium-greek.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssRobotoMediumLatinExtWoff2 reads file data from disk. It returns an error on failure.
func publicCssRobotoMediumLatinExtWoff2() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\css\\roboto\\medium-latin-ext.woff2"
	name := "public/css/roboto/medium-latin-ext.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssRobotoMediumLatinWoff2 reads file data from disk. It returns an error on failure.
func publicCssRobotoMediumLatinWoff2() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\css\\roboto\\medium-latin.woff2"
	name := "public/css/roboto/medium-latin.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssRobotoMediumVietnameseWoff2 reads file data from disk. It returns an error on failure.
func publicCssRobotoMediumVietnameseWoff2() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\css\\roboto\\medium-vietnamese.woff2"
	name := "public/css/roboto/medium-vietnamese.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssRobotoNormalCyrillicExtWoff2 reads file data from disk. It returns an error on failure.
func publicCssRobotoNormalCyrillicExtWoff2() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\css\\roboto\\normal-cyrillic-ext.woff2"
	name := "public/css/roboto/normal-cyrillic-ext.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssRobotoNormalCyrillicWoff2 reads file data from disk. It returns an error on failure.
func publicCssRobotoNormalCyrillicWoff2() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\css\\roboto\\normal-cyrillic.woff2"
	name := "public/css/roboto/normal-cyrillic.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssRobotoNormalGreekExtWoff2 reads file data from disk. It returns an error on failure.
func publicCssRobotoNormalGreekExtWoff2() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\css\\roboto\\normal-greek-ext.woff2"
	name := "public/css/roboto/normal-greek-ext.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssRobotoNormalGreekWoff2 reads file data from disk. It returns an error on failure.
func publicCssRobotoNormalGreekWoff2() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\css\\roboto\\normal-greek.woff2"
	name := "public/css/roboto/normal-greek.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssRobotoNormalLatinExtWoff2 reads file data from disk. It returns an error on failure.
func publicCssRobotoNormalLatinExtWoff2() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\css\\roboto\\normal-latin-ext.woff2"
	name := "public/css/roboto/normal-latin-ext.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssRobotoNormalLatinWoff2 reads file data from disk. It returns an error on failure.
func publicCssRobotoNormalLatinWoff2() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\css\\roboto\\normal-latin.woff2"
	name := "public/css/roboto/normal-latin.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssRobotoNormalVietnameseWoff2 reads file data from disk. It returns an error on failure.
func publicCssRobotoNormalVietnameseWoff2() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\css\\roboto\\normal-vietnamese.woff2"
	name := "public/css/roboto/normal-vietnamese.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicCssStylesCss reads file data from disk. It returns an error on failure.
func publicCssStylesCss() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\css\\styles.css"
	name := "public/css/styles.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinAceJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinAceJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\ace.js"
	name := "public/ace/src-min/ace.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinExtBeautifyJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinExtBeautifyJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\ext-beautify.js"
	name := "public/ace/src-min/ext-beautify.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinExtChromevoxJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinExtChromevoxJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\ext-chromevox.js"
	name := "public/ace/src-min/ext-chromevox.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinExtElastic_tabstops_liteJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinExtElastic_tabstops_liteJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\ext-elastic_tabstops_lite.js"
	name := "public/ace/src-min/ext-elastic_tabstops_lite.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinExtEmmetJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinExtEmmetJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\ext-emmet.js"
	name := "public/ace/src-min/ext-emmet.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinExtError_markerJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinExtError_markerJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\ext-error_marker.js"
	name := "public/ace/src-min/ext-error_marker.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinExtKeybinding_menuJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinExtKeybinding_menuJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\ext-keybinding_menu.js"
	name := "public/ace/src-min/ext-keybinding_menu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinExtLanguage_toolsJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinExtLanguage_toolsJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\ext-language_tools.js"
	name := "public/ace/src-min/ext-language_tools.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinExtLinkingJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinExtLinkingJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\ext-linking.js"
	name := "public/ace/src-min/ext-linking.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinExtModelistJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinExtModelistJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\ext-modelist.js"
	name := "public/ace/src-min/ext-modelist.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinExtOld_ieJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinExtOld_ieJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\ext-old_ie.js"
	name := "public/ace/src-min/ext-old_ie.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinExtSearchboxJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinExtSearchboxJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\ext-searchbox.js"
	name := "public/ace/src-min/ext-searchbox.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinExtSettings_menuJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinExtSettings_menuJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\ext-settings_menu.js"
	name := "public/ace/src-min/ext-settings_menu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinExtSpellcheckJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinExtSpellcheckJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\ext-spellcheck.js"
	name := "public/ace/src-min/ext-spellcheck.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinExtSplitJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinExtSplitJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\ext-split.js"
	name := "public/ace/src-min/ext-split.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinExtStatic_highlightJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinExtStatic_highlightJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\ext-static_highlight.js"
	name := "public/ace/src-min/ext-static_highlight.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinExtStatusbarJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinExtStatusbarJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\ext-statusbar.js"
	name := "public/ace/src-min/ext-statusbar.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinExtTextareaJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinExtTextareaJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\ext-textarea.js"
	name := "public/ace/src-min/ext-textarea.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinExtThemelistJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinExtThemelistJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\ext-themelist.js"
	name := "public/ace/src-min/ext-themelist.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinExtWhitespaceJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinExtWhitespaceJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\ext-whitespace.js"
	name := "public/ace/src-min/ext-whitespace.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinKeybindingEmacsJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinKeybindingEmacsJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\keybinding-emacs.js"
	name := "public/ace/src-min/keybinding-emacs.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinKeybindingVimJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinKeybindingVimJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\keybinding-vim.js"
	name := "public/ace/src-min/keybinding-vim.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeAbapJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeAbapJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-abap.js"
	name := "public/ace/src-min/mode-abap.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeAbcJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeAbcJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-abc.js"
	name := "public/ace/src-min/mode-abc.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeActionscriptJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeActionscriptJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-actionscript.js"
	name := "public/ace/src-min/mode-actionscript.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeAdaJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeAdaJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-ada.js"
	name := "public/ace/src-min/mode-ada.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeApache_confJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeApache_confJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-apache_conf.js"
	name := "public/ace/src-min/mode-apache_conf.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeApplescriptJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeApplescriptJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-applescript.js"
	name := "public/ace/src-min/mode-applescript.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeAsciidocJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeAsciidocJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-asciidoc.js"
	name := "public/ace/src-min/mode-asciidoc.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeAssembly_x86Js reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeAssembly_x86Js() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-assembly_x86.js"
	name := "public/ace/src-min/mode-assembly_x86.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeAutohotkeyJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeAutohotkeyJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-autohotkey.js"
	name := "public/ace/src-min/mode-autohotkey.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeBatchfileJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeBatchfileJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-batchfile.js"
	name := "public/ace/src-min/mode-batchfile.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeBroJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeBroJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-bro.js"
	name := "public/ace/src-min/mode-bro.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeC9searchJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeC9searchJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-c9search.js"
	name := "public/ace/src-min/mode-c9search.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeC_cppJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeC_cppJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-c_cpp.js"
	name := "public/ace/src-min/mode-c_cpp.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeCirruJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeCirruJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-cirru.js"
	name := "public/ace/src-min/mode-cirru.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeClojureJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeClojureJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-clojure.js"
	name := "public/ace/src-min/mode-clojure.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeCobolJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeCobolJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-cobol.js"
	name := "public/ace/src-min/mode-cobol.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeCoffeeJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeCoffeeJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-coffee.js"
	name := "public/ace/src-min/mode-coffee.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeColdfusionJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeColdfusionJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-coldfusion.js"
	name := "public/ace/src-min/mode-coldfusion.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeCsharpJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeCsharpJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-csharp.js"
	name := "public/ace/src-min/mode-csharp.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeCssJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeCssJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-css.js"
	name := "public/ace/src-min/mode-css.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeCurlyJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeCurlyJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-curly.js"
	name := "public/ace/src-min/mode-curly.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeDJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeDJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-d.js"
	name := "public/ace/src-min/mode-d.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeDartJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeDartJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-dart.js"
	name := "public/ace/src-min/mode-dart.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeDiffJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeDiffJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-diff.js"
	name := "public/ace/src-min/mode-diff.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeDjangoJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeDjangoJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-django.js"
	name := "public/ace/src-min/mode-django.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeDockerfileJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeDockerfileJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-dockerfile.js"
	name := "public/ace/src-min/mode-dockerfile.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeDotJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeDotJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-dot.js"
	name := "public/ace/src-min/mode-dot.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeDroolsJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeDroolsJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-drools.js"
	name := "public/ace/src-min/mode-drools.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeEiffelJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeEiffelJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-eiffel.js"
	name := "public/ace/src-min/mode-eiffel.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeEjsJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeEjsJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-ejs.js"
	name := "public/ace/src-min/mode-ejs.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeElixirJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeElixirJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-elixir.js"
	name := "public/ace/src-min/mode-elixir.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeElmJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeElmJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-elm.js"
	name := "public/ace/src-min/mode-elm.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeErlangJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeErlangJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-erlang.js"
	name := "public/ace/src-min/mode-erlang.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeForthJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeForthJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-forth.js"
	name := "public/ace/src-min/mode-forth.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeFortranJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeFortranJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-fortran.js"
	name := "public/ace/src-min/mode-fortran.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeFtlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeFtlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-ftl.js"
	name := "public/ace/src-min/mode-ftl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeGcodeJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeGcodeJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-gcode.js"
	name := "public/ace/src-min/mode-gcode.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeGherkinJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeGherkinJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-gherkin.js"
	name := "public/ace/src-min/mode-gherkin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeGitignoreJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeGitignoreJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-gitignore.js"
	name := "public/ace/src-min/mode-gitignore.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeGlslJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeGlslJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-glsl.js"
	name := "public/ace/src-min/mode-glsl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeGobstonesJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeGobstonesJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-gobstones.js"
	name := "public/ace/src-min/mode-gobstones.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeGolangJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeGolangJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-golang.js"
	name := "public/ace/src-min/mode-golang.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeGroovyJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeGroovyJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-groovy.js"
	name := "public/ace/src-min/mode-groovy.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeHamlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeHamlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-haml.js"
	name := "public/ace/src-min/mode-haml.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeHandlebarsJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeHandlebarsJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-handlebars.js"
	name := "public/ace/src-min/mode-handlebars.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeHaskellJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeHaskellJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-haskell.js"
	name := "public/ace/src-min/mode-haskell.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeHaskell_cabalJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeHaskell_cabalJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-haskell_cabal.js"
	name := "public/ace/src-min/mode-haskell_cabal.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeHaxeJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeHaxeJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-haxe.js"
	name := "public/ace/src-min/mode-haxe.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeHjsonJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeHjsonJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-hjson.js"
	name := "public/ace/src-min/mode-hjson.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeHtmlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeHtmlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-html.js"
	name := "public/ace/src-min/mode-html.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeHtml_elixirJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeHtml_elixirJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-html_elixir.js"
	name := "public/ace/src-min/mode-html_elixir.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeHtml_rubyJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeHtml_rubyJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-html_ruby.js"
	name := "public/ace/src-min/mode-html_ruby.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeIniJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeIniJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-ini.js"
	name := "public/ace/src-min/mode-ini.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeIoJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeIoJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-io.js"
	name := "public/ace/src-min/mode-io.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeJackJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeJackJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-jack.js"
	name := "public/ace/src-min/mode-jack.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeJadeJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeJadeJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-jade.js"
	name := "public/ace/src-min/mode-jade.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeJavaJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeJavaJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-java.js"
	name := "public/ace/src-min/mode-java.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeJavascriptJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeJavascriptJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-javascript.js"
	name := "public/ace/src-min/mode-javascript.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeJsonJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeJsonJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-json.js"
	name := "public/ace/src-min/mode-json.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeJsoniqJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeJsoniqJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-jsoniq.js"
	name := "public/ace/src-min/mode-jsoniq.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeJspJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeJspJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-jsp.js"
	name := "public/ace/src-min/mode-jsp.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeJsxJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeJsxJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-jsx.js"
	name := "public/ace/src-min/mode-jsx.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeJuliaJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeJuliaJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-julia.js"
	name := "public/ace/src-min/mode-julia.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeKotlinJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeKotlinJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-kotlin.js"
	name := "public/ace/src-min/mode-kotlin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeLatexJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeLatexJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-latex.js"
	name := "public/ace/src-min/mode-latex.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeLeanJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeLeanJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-lean.js"
	name := "public/ace/src-min/mode-lean.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeLessJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeLessJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-less.js"
	name := "public/ace/src-min/mode-less.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeLiquidJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeLiquidJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-liquid.js"
	name := "public/ace/src-min/mode-liquid.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeLispJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeLispJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-lisp.js"
	name := "public/ace/src-min/mode-lisp.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeLive_scriptJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeLive_scriptJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-live_script.js"
	name := "public/ace/src-min/mode-live_script.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeLivescriptJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeLivescriptJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-livescript.js"
	name := "public/ace/src-min/mode-livescript.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeLogiqlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeLogiqlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-logiql.js"
	name := "public/ace/src-min/mode-logiql.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeLslJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeLslJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-lsl.js"
	name := "public/ace/src-min/mode-lsl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeLuaJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeLuaJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-lua.js"
	name := "public/ace/src-min/mode-lua.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeLuapageJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeLuapageJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-luapage.js"
	name := "public/ace/src-min/mode-luapage.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeLuceneJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeLuceneJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-lucene.js"
	name := "public/ace/src-min/mode-lucene.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeMakefileJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeMakefileJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-makefile.js"
	name := "public/ace/src-min/mode-makefile.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeMarkdownJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeMarkdownJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-markdown.js"
	name := "public/ace/src-min/mode-markdown.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeMaskJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeMaskJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-mask.js"
	name := "public/ace/src-min/mode-mask.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeMatlabJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeMatlabJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-matlab.js"
	name := "public/ace/src-min/mode-matlab.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeMazeJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeMazeJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-maze.js"
	name := "public/ace/src-min/mode-maze.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeMelJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeMelJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-mel.js"
	name := "public/ace/src-min/mode-mel.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeMips_assemblerJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeMips_assemblerJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-mips_assembler.js"
	name := "public/ace/src-min/mode-mips_assembler.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeMipsassemblerJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeMipsassemblerJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-mipsassembler.js"
	name := "public/ace/src-min/mode-mipsassembler.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeMushcodeJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeMushcodeJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-mushcode.js"
	name := "public/ace/src-min/mode-mushcode.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeMysqlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeMysqlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-mysql.js"
	name := "public/ace/src-min/mode-mysql.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeNixJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeNixJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-nix.js"
	name := "public/ace/src-min/mode-nix.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeNsisJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeNsisJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-nsis.js"
	name := "public/ace/src-min/mode-nsis.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeObjectivecJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeObjectivecJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-objectivec.js"
	name := "public/ace/src-min/mode-objectivec.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeOcamlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeOcamlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-ocaml.js"
	name := "public/ace/src-min/mode-ocaml.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModePascalJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModePascalJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-pascal.js"
	name := "public/ace/src-min/mode-pascal.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModePerlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModePerlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-perl.js"
	name := "public/ace/src-min/mode-perl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModePgsqlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModePgsqlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-pgsql.js"
	name := "public/ace/src-min/mode-pgsql.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModePhpJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModePhpJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-php.js"
	name := "public/ace/src-min/mode-php.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModePlain_textJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModePlain_textJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-plain_text.js"
	name := "public/ace/src-min/mode-plain_text.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModePowershellJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModePowershellJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-powershell.js"
	name := "public/ace/src-min/mode-powershell.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModePraatJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModePraatJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-praat.js"
	name := "public/ace/src-min/mode-praat.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModePrologJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModePrologJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-prolog.js"
	name := "public/ace/src-min/mode-prolog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModePropertiesJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModePropertiesJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-properties.js"
	name := "public/ace/src-min/mode-properties.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeProtobufJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeProtobufJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-protobuf.js"
	name := "public/ace/src-min/mode-protobuf.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModePythonJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModePythonJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-python.js"
	name := "public/ace/src-min/mode-python.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeRJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeRJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-r.js"
	name := "public/ace/src-min/mode-r.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeRazorJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeRazorJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-razor.js"
	name := "public/ace/src-min/mode-razor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeRdocJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeRdocJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-rdoc.js"
	name := "public/ace/src-min/mode-rdoc.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeRhtmlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeRhtmlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-rhtml.js"
	name := "public/ace/src-min/mode-rhtml.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeRstJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeRstJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-rst.js"
	name := "public/ace/src-min/mode-rst.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeRubyJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeRubyJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-ruby.js"
	name := "public/ace/src-min/mode-ruby.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeRustJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeRustJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-rust.js"
	name := "public/ace/src-min/mode-rust.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeSassJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeSassJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-sass.js"
	name := "public/ace/src-min/mode-sass.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeScadJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeScadJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-scad.js"
	name := "public/ace/src-min/mode-scad.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeScalaJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeScalaJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-scala.js"
	name := "public/ace/src-min/mode-scala.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeSchemeJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeSchemeJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-scheme.js"
	name := "public/ace/src-min/mode-scheme.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeScssJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeScssJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-scss.js"
	name := "public/ace/src-min/mode-scss.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeShJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeShJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-sh.js"
	name := "public/ace/src-min/mode-sh.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeSjsJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeSjsJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-sjs.js"
	name := "public/ace/src-min/mode-sjs.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeSmartyJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeSmartyJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-smarty.js"
	name := "public/ace/src-min/mode-smarty.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeSnippetsJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeSnippetsJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-snippets.js"
	name := "public/ace/src-min/mode-snippets.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeSoy_templateJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeSoy_templateJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-soy_template.js"
	name := "public/ace/src-min/mode-soy_template.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeSpaceJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeSpaceJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-space.js"
	name := "public/ace/src-min/mode-space.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeSqlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeSqlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-sql.js"
	name := "public/ace/src-min/mode-sql.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeSqlserverJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeSqlserverJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-sqlserver.js"
	name := "public/ace/src-min/mode-sqlserver.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeStylusJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeStylusJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-stylus.js"
	name := "public/ace/src-min/mode-stylus.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeSvgJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeSvgJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-svg.js"
	name := "public/ace/src-min/mode-svg.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeSwiftJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeSwiftJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-swift.js"
	name := "public/ace/src-min/mode-swift.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeSwigJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeSwigJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-swig.js"
	name := "public/ace/src-min/mode-swig.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeTclJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeTclJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-tcl.js"
	name := "public/ace/src-min/mode-tcl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeTexJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeTexJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-tex.js"
	name := "public/ace/src-min/mode-tex.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeTextJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeTextJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-text.js"
	name := "public/ace/src-min/mode-text.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeTextileJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeTextileJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-textile.js"
	name := "public/ace/src-min/mode-textile.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeTomlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeTomlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-toml.js"
	name := "public/ace/src-min/mode-toml.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeTsxJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeTsxJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-tsx.js"
	name := "public/ace/src-min/mode-tsx.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeTwigJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeTwigJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-twig.js"
	name := "public/ace/src-min/mode-twig.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeTypescriptJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeTypescriptJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-typescript.js"
	name := "public/ace/src-min/mode-typescript.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeValaJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeValaJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-vala.js"
	name := "public/ace/src-min/mode-vala.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeVbscriptJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeVbscriptJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-vbscript.js"
	name := "public/ace/src-min/mode-vbscript.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeVelocityJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeVelocityJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-velocity.js"
	name := "public/ace/src-min/mode-velocity.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeVerilogJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeVerilogJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-verilog.js"
	name := "public/ace/src-min/mode-verilog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeVhdlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeVhdlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-vhdl.js"
	name := "public/ace/src-min/mode-vhdl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeWollokJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeWollokJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-wollok.js"
	name := "public/ace/src-min/mode-wollok.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeXmlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeXmlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-xml.js"
	name := "public/ace/src-min/mode-xml.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeXqueryJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeXqueryJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-xquery.js"
	name := "public/ace/src-min/mode-xquery.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinModeYamlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinModeYamlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\mode-yaml.js"
	name := "public/ace/src-min/mode-yaml.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsAbapJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsAbapJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\abap.js"
	name := "public/ace/src-min/snippets/abap.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsAbcJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsAbcJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\abc.js"
	name := "public/ace/src-min/snippets/abc.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsActionscriptJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsActionscriptJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\actionscript.js"
	name := "public/ace/src-min/snippets/actionscript.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsAdaJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsAdaJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\ada.js"
	name := "public/ace/src-min/snippets/ada.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsApache_confJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsApache_confJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\apache_conf.js"
	name := "public/ace/src-min/snippets/apache_conf.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsApplescriptJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsApplescriptJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\applescript.js"
	name := "public/ace/src-min/snippets/applescript.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsAsciidocJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsAsciidocJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\asciidoc.js"
	name := "public/ace/src-min/snippets/asciidoc.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsAssembly_x86Js reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsAssembly_x86Js() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\assembly_x86.js"
	name := "public/ace/src-min/snippets/assembly_x86.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsAutohotkeyJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsAutohotkeyJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\autohotkey.js"
	name := "public/ace/src-min/snippets/autohotkey.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsBatchfileJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsBatchfileJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\batchfile.js"
	name := "public/ace/src-min/snippets/batchfile.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsBroJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsBroJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\bro.js"
	name := "public/ace/src-min/snippets/bro.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsC9searchJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsC9searchJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\c9search.js"
	name := "public/ace/src-min/snippets/c9search.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsC_cppJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsC_cppJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\c_cpp.js"
	name := "public/ace/src-min/snippets/c_cpp.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsCirruJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsCirruJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\cirru.js"
	name := "public/ace/src-min/snippets/cirru.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsClojureJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsClojureJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\clojure.js"
	name := "public/ace/src-min/snippets/clojure.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsCobolJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsCobolJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\cobol.js"
	name := "public/ace/src-min/snippets/cobol.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsCoffeeJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsCoffeeJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\coffee.js"
	name := "public/ace/src-min/snippets/coffee.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsColdfusionJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsColdfusionJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\coldfusion.js"
	name := "public/ace/src-min/snippets/coldfusion.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsCsharpJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsCsharpJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\csharp.js"
	name := "public/ace/src-min/snippets/csharp.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsCssJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsCssJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\css.js"
	name := "public/ace/src-min/snippets/css.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsCurlyJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsCurlyJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\curly.js"
	name := "public/ace/src-min/snippets/curly.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsDJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsDJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\d.js"
	name := "public/ace/src-min/snippets/d.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsDartJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsDartJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\dart.js"
	name := "public/ace/src-min/snippets/dart.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsDiffJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsDiffJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\diff.js"
	name := "public/ace/src-min/snippets/diff.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsDjangoJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsDjangoJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\django.js"
	name := "public/ace/src-min/snippets/django.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsDockerfileJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsDockerfileJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\dockerfile.js"
	name := "public/ace/src-min/snippets/dockerfile.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsDotJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsDotJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\dot.js"
	name := "public/ace/src-min/snippets/dot.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsDroolsJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsDroolsJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\drools.js"
	name := "public/ace/src-min/snippets/drools.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsEiffelJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsEiffelJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\eiffel.js"
	name := "public/ace/src-min/snippets/eiffel.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsEjsJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsEjsJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\ejs.js"
	name := "public/ace/src-min/snippets/ejs.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsElixirJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsElixirJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\elixir.js"
	name := "public/ace/src-min/snippets/elixir.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsElmJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsElmJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\elm.js"
	name := "public/ace/src-min/snippets/elm.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsErlangJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsErlangJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\erlang.js"
	name := "public/ace/src-min/snippets/erlang.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsForthJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsForthJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\forth.js"
	name := "public/ace/src-min/snippets/forth.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsFortranJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsFortranJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\fortran.js"
	name := "public/ace/src-min/snippets/fortran.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsFtlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsFtlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\ftl.js"
	name := "public/ace/src-min/snippets/ftl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsGcodeJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsGcodeJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\gcode.js"
	name := "public/ace/src-min/snippets/gcode.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsGherkinJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsGherkinJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\gherkin.js"
	name := "public/ace/src-min/snippets/gherkin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsGitignoreJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsGitignoreJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\gitignore.js"
	name := "public/ace/src-min/snippets/gitignore.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsGlslJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsGlslJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\glsl.js"
	name := "public/ace/src-min/snippets/glsl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsGobstonesJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsGobstonesJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\gobstones.js"
	name := "public/ace/src-min/snippets/gobstones.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsGolangJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsGolangJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\golang.js"
	name := "public/ace/src-min/snippets/golang.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsGroovyJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsGroovyJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\groovy.js"
	name := "public/ace/src-min/snippets/groovy.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsHamlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsHamlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\haml.js"
	name := "public/ace/src-min/snippets/haml.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsHandlebarsJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsHandlebarsJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\handlebars.js"
	name := "public/ace/src-min/snippets/handlebars.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsHaskellJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsHaskellJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\haskell.js"
	name := "public/ace/src-min/snippets/haskell.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsHaskell_cabalJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsHaskell_cabalJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\haskell_cabal.js"
	name := "public/ace/src-min/snippets/haskell_cabal.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsHaxeJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsHaxeJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\haxe.js"
	name := "public/ace/src-min/snippets/haxe.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsHjsonJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsHjsonJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\hjson.js"
	name := "public/ace/src-min/snippets/hjson.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsHtmlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsHtmlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\html.js"
	name := "public/ace/src-min/snippets/html.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsHtml_elixirJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsHtml_elixirJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\html_elixir.js"
	name := "public/ace/src-min/snippets/html_elixir.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsHtml_rubyJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsHtml_rubyJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\html_ruby.js"
	name := "public/ace/src-min/snippets/html_ruby.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsIniJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsIniJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\ini.js"
	name := "public/ace/src-min/snippets/ini.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsIoJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsIoJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\io.js"
	name := "public/ace/src-min/snippets/io.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsJackJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsJackJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\jack.js"
	name := "public/ace/src-min/snippets/jack.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsJadeJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsJadeJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\jade.js"
	name := "public/ace/src-min/snippets/jade.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsJavaJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsJavaJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\java.js"
	name := "public/ace/src-min/snippets/java.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsJavascriptJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsJavascriptJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\javascript.js"
	name := "public/ace/src-min/snippets/javascript.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsJsonJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsJsonJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\json.js"
	name := "public/ace/src-min/snippets/json.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsJsoniqJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsJsoniqJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\jsoniq.js"
	name := "public/ace/src-min/snippets/jsoniq.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsJspJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsJspJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\jsp.js"
	name := "public/ace/src-min/snippets/jsp.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsJsxJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsJsxJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\jsx.js"
	name := "public/ace/src-min/snippets/jsx.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsJuliaJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsJuliaJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\julia.js"
	name := "public/ace/src-min/snippets/julia.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsKotlinJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsKotlinJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\kotlin.js"
	name := "public/ace/src-min/snippets/kotlin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsLatexJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsLatexJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\latex.js"
	name := "public/ace/src-min/snippets/latex.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsLeanJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsLeanJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\lean.js"
	name := "public/ace/src-min/snippets/lean.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsLessJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsLessJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\less.js"
	name := "public/ace/src-min/snippets/less.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsLiquidJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsLiquidJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\liquid.js"
	name := "public/ace/src-min/snippets/liquid.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsLispJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsLispJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\lisp.js"
	name := "public/ace/src-min/snippets/lisp.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsLive_scriptJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsLive_scriptJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\live_script.js"
	name := "public/ace/src-min/snippets/live_script.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsLivescriptJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsLivescriptJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\livescript.js"
	name := "public/ace/src-min/snippets/livescript.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsLogiqlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsLogiqlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\logiql.js"
	name := "public/ace/src-min/snippets/logiql.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsLslJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsLslJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\lsl.js"
	name := "public/ace/src-min/snippets/lsl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsLuaJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsLuaJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\lua.js"
	name := "public/ace/src-min/snippets/lua.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsLuapageJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsLuapageJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\luapage.js"
	name := "public/ace/src-min/snippets/luapage.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsLuceneJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsLuceneJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\lucene.js"
	name := "public/ace/src-min/snippets/lucene.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsMakefileJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsMakefileJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\makefile.js"
	name := "public/ace/src-min/snippets/makefile.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsMarkdownJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsMarkdownJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\markdown.js"
	name := "public/ace/src-min/snippets/markdown.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsMaskJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsMaskJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\mask.js"
	name := "public/ace/src-min/snippets/mask.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsMatlabJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsMatlabJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\matlab.js"
	name := "public/ace/src-min/snippets/matlab.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsMazeJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsMazeJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\maze.js"
	name := "public/ace/src-min/snippets/maze.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsMelJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsMelJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\mel.js"
	name := "public/ace/src-min/snippets/mel.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsMips_assemblerJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsMips_assemblerJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\mips_assembler.js"
	name := "public/ace/src-min/snippets/mips_assembler.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsMipsassemblerJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsMipsassemblerJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\mipsassembler.js"
	name := "public/ace/src-min/snippets/mipsassembler.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsMushcodeJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsMushcodeJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\mushcode.js"
	name := "public/ace/src-min/snippets/mushcode.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsMysqlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsMysqlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\mysql.js"
	name := "public/ace/src-min/snippets/mysql.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsNixJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsNixJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\nix.js"
	name := "public/ace/src-min/snippets/nix.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsNsisJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsNsisJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\nsis.js"
	name := "public/ace/src-min/snippets/nsis.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsObjectivecJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsObjectivecJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\objectivec.js"
	name := "public/ace/src-min/snippets/objectivec.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsOcamlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsOcamlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\ocaml.js"
	name := "public/ace/src-min/snippets/ocaml.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsPascalJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsPascalJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\pascal.js"
	name := "public/ace/src-min/snippets/pascal.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsPerlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsPerlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\perl.js"
	name := "public/ace/src-min/snippets/perl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsPgsqlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsPgsqlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\pgsql.js"
	name := "public/ace/src-min/snippets/pgsql.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsPhpJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsPhpJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\php.js"
	name := "public/ace/src-min/snippets/php.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsPlain_textJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsPlain_textJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\plain_text.js"
	name := "public/ace/src-min/snippets/plain_text.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsPowershellJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsPowershellJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\powershell.js"
	name := "public/ace/src-min/snippets/powershell.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsPraatJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsPraatJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\praat.js"
	name := "public/ace/src-min/snippets/praat.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsPrologJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsPrologJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\prolog.js"
	name := "public/ace/src-min/snippets/prolog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsPropertiesJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsPropertiesJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\properties.js"
	name := "public/ace/src-min/snippets/properties.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsProtobufJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsProtobufJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\protobuf.js"
	name := "public/ace/src-min/snippets/protobuf.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsPythonJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsPythonJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\python.js"
	name := "public/ace/src-min/snippets/python.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsRJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsRJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\r.js"
	name := "public/ace/src-min/snippets/r.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsRazorJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsRazorJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\razor.js"
	name := "public/ace/src-min/snippets/razor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsRdocJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsRdocJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\rdoc.js"
	name := "public/ace/src-min/snippets/rdoc.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsRhtmlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsRhtmlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\rhtml.js"
	name := "public/ace/src-min/snippets/rhtml.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsRstJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsRstJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\rst.js"
	name := "public/ace/src-min/snippets/rst.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsRubyJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsRubyJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\ruby.js"
	name := "public/ace/src-min/snippets/ruby.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsRustJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsRustJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\rust.js"
	name := "public/ace/src-min/snippets/rust.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsSassJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsSassJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\sass.js"
	name := "public/ace/src-min/snippets/sass.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsScadJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsScadJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\scad.js"
	name := "public/ace/src-min/snippets/scad.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsScalaJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsScalaJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\scala.js"
	name := "public/ace/src-min/snippets/scala.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsSchemeJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsSchemeJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\scheme.js"
	name := "public/ace/src-min/snippets/scheme.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsScssJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsScssJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\scss.js"
	name := "public/ace/src-min/snippets/scss.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsShJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsShJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\sh.js"
	name := "public/ace/src-min/snippets/sh.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsSjsJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsSjsJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\sjs.js"
	name := "public/ace/src-min/snippets/sjs.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsSmartyJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsSmartyJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\smarty.js"
	name := "public/ace/src-min/snippets/smarty.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsSnippetsJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsSnippetsJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\snippets.js"
	name := "public/ace/src-min/snippets/snippets.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsSoy_templateJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsSoy_templateJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\soy_template.js"
	name := "public/ace/src-min/snippets/soy_template.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsSpaceJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsSpaceJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\space.js"
	name := "public/ace/src-min/snippets/space.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsSqlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsSqlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\sql.js"
	name := "public/ace/src-min/snippets/sql.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsSqlserverJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsSqlserverJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\sqlserver.js"
	name := "public/ace/src-min/snippets/sqlserver.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsStylusJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsStylusJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\stylus.js"
	name := "public/ace/src-min/snippets/stylus.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsSvgJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsSvgJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\svg.js"
	name := "public/ace/src-min/snippets/svg.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsSwiftJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsSwiftJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\swift.js"
	name := "public/ace/src-min/snippets/swift.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsSwigJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsSwigJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\swig.js"
	name := "public/ace/src-min/snippets/swig.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsTclJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsTclJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\tcl.js"
	name := "public/ace/src-min/snippets/tcl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsTexJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsTexJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\tex.js"
	name := "public/ace/src-min/snippets/tex.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsTextJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsTextJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\text.js"
	name := "public/ace/src-min/snippets/text.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsTextileJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsTextileJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\textile.js"
	name := "public/ace/src-min/snippets/textile.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsTomlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsTomlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\toml.js"
	name := "public/ace/src-min/snippets/toml.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsTsxJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsTsxJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\tsx.js"
	name := "public/ace/src-min/snippets/tsx.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsTwigJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsTwigJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\twig.js"
	name := "public/ace/src-min/snippets/twig.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsTypescriptJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsTypescriptJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\typescript.js"
	name := "public/ace/src-min/snippets/typescript.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsValaJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsValaJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\vala.js"
	name := "public/ace/src-min/snippets/vala.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsVbscriptJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsVbscriptJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\vbscript.js"
	name := "public/ace/src-min/snippets/vbscript.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsVelocityJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsVelocityJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\velocity.js"
	name := "public/ace/src-min/snippets/velocity.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsVerilogJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsVerilogJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\verilog.js"
	name := "public/ace/src-min/snippets/verilog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsVhdlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsVhdlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\vhdl.js"
	name := "public/ace/src-min/snippets/vhdl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsWollokJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsWollokJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\wollok.js"
	name := "public/ace/src-min/snippets/wollok.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsXmlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsXmlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\xml.js"
	name := "public/ace/src-min/snippets/xml.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsXqueryJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsXqueryJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\xquery.js"
	name := "public/ace/src-min/snippets/xquery.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinSnippetsYamlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinSnippetsYamlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\snippets\\yaml.js"
	name := "public/ace/src-min/snippets/yaml.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinThemeGithubJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinThemeGithubJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\theme-github.js"
	name := "public/ace/src-min/theme-github.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinWorkerCoffeeJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinWorkerCoffeeJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\worker-coffee.js"
	name := "public/ace/src-min/worker-coffee.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinWorkerCssJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinWorkerCssJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\worker-css.js"
	name := "public/ace/src-min/worker-css.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinWorkerHtmlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinWorkerHtmlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\worker-html.js"
	name := "public/ace/src-min/worker-html.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinWorkerJavascriptJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinWorkerJavascriptJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\worker-javascript.js"
	name := "public/ace/src-min/worker-javascript.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinWorkerJsonJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinWorkerJsonJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\worker-json.js"
	name := "public/ace/src-min/worker-json.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinWorkerLuaJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinWorkerLuaJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\worker-lua.js"
	name := "public/ace/src-min/worker-lua.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinWorkerPhpJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinWorkerPhpJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\worker-php.js"
	name := "public/ace/src-min/worker-php.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinWorkerXmlJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinWorkerXmlJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\worker-xml.js"
	name := "public/ace/src-min/worker-xml.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// publicAceSrcMinWorkerXqueryJs reads file data from disk. It returns an error on failure.
func publicAceSrcMinWorkerXqueryJs() (*asset, error) {
	path := "D:\\Code\\Go\\src\\github.com\\hacdias\\filemanager\\_embed\\public\\ace\\src-min\\worker-xquery.js"
	name := "public/ace/src-min/worker-xquery.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/base.tmpl": templatesBaseTmpl,
	"templates/editor.tmpl": templatesEditorTmpl,
	"templates/frontmatter.tmpl": templatesFrontmatterTmpl,
	"templates/listing.tmpl": templatesListingTmpl,
	"templates/minimal.tmpl": templatesMinimalTmpl,
	"templates/single.tmpl": templatesSingleTmpl,
	"public/js/common.js": publicJsCommonJs,
	"public/js/editor.js": publicJsEditorJs,
	"public/js/form2js.js": publicJsForm2jsJs,
	"public/js/listing.js": publicJsListingJs,
	"public/css/fonts.css": publicCssFontsCss,
	"public/css/material/icons.woff2": publicCssMaterialIconsWoff2,
	"public/css/normalize.css": publicCssNormalizeCss,
	"public/css/roboto/medium-cyrillic-ext.woff2": publicCssRobotoMediumCyrillicExtWoff2,
	"public/css/roboto/medium-cyrillic.woff2": publicCssRobotoMediumCyrillicWoff2,
	"public/css/roboto/medium-greek-ext.woff2": publicCssRobotoMediumGreekExtWoff2,
	"public/css/roboto/medium-greek.woff2": publicCssRobotoMediumGreekWoff2,
	"public/css/roboto/medium-latin-ext.woff2": publicCssRobotoMediumLatinExtWoff2,
	"public/css/roboto/medium-latin.woff2": publicCssRobotoMediumLatinWoff2,
	"public/css/roboto/medium-vietnamese.woff2": publicCssRobotoMediumVietnameseWoff2,
	"public/css/roboto/normal-cyrillic-ext.woff2": publicCssRobotoNormalCyrillicExtWoff2,
	"public/css/roboto/normal-cyrillic.woff2": publicCssRobotoNormalCyrillicWoff2,
	"public/css/roboto/normal-greek-ext.woff2": publicCssRobotoNormalGreekExtWoff2,
	"public/css/roboto/normal-greek.woff2": publicCssRobotoNormalGreekWoff2,
	"public/css/roboto/normal-latin-ext.woff2": publicCssRobotoNormalLatinExtWoff2,
	"public/css/roboto/normal-latin.woff2": publicCssRobotoNormalLatinWoff2,
	"public/css/roboto/normal-vietnamese.woff2": publicCssRobotoNormalVietnameseWoff2,
	"public/css/styles.css": publicCssStylesCss,
	"public/ace/src-min/ace.js": publicAceSrcMinAceJs,
	"public/ace/src-min/ext-beautify.js": publicAceSrcMinExtBeautifyJs,
	"public/ace/src-min/ext-chromevox.js": publicAceSrcMinExtChromevoxJs,
	"public/ace/src-min/ext-elastic_tabstops_lite.js": publicAceSrcMinExtElastic_tabstops_liteJs,
	"public/ace/src-min/ext-emmet.js": publicAceSrcMinExtEmmetJs,
	"public/ace/src-min/ext-error_marker.js": publicAceSrcMinExtError_markerJs,
	"public/ace/src-min/ext-keybinding_menu.js": publicAceSrcMinExtKeybinding_menuJs,
	"public/ace/src-min/ext-language_tools.js": publicAceSrcMinExtLanguage_toolsJs,
	"public/ace/src-min/ext-linking.js": publicAceSrcMinExtLinkingJs,
	"public/ace/src-min/ext-modelist.js": publicAceSrcMinExtModelistJs,
	"public/ace/src-min/ext-old_ie.js": publicAceSrcMinExtOld_ieJs,
	"public/ace/src-min/ext-searchbox.js": publicAceSrcMinExtSearchboxJs,
	"public/ace/src-min/ext-settings_menu.js": publicAceSrcMinExtSettings_menuJs,
	"public/ace/src-min/ext-spellcheck.js": publicAceSrcMinExtSpellcheckJs,
	"public/ace/src-min/ext-split.js": publicAceSrcMinExtSplitJs,
	"public/ace/src-min/ext-static_highlight.js": publicAceSrcMinExtStatic_highlightJs,
	"public/ace/src-min/ext-statusbar.js": publicAceSrcMinExtStatusbarJs,
	"public/ace/src-min/ext-textarea.js": publicAceSrcMinExtTextareaJs,
	"public/ace/src-min/ext-themelist.js": publicAceSrcMinExtThemelistJs,
	"public/ace/src-min/ext-whitespace.js": publicAceSrcMinExtWhitespaceJs,
	"public/ace/src-min/keybinding-emacs.js": publicAceSrcMinKeybindingEmacsJs,
	"public/ace/src-min/keybinding-vim.js": publicAceSrcMinKeybindingVimJs,
	"public/ace/src-min/mode-abap.js": publicAceSrcMinModeAbapJs,
	"public/ace/src-min/mode-abc.js": publicAceSrcMinModeAbcJs,
	"public/ace/src-min/mode-actionscript.js": publicAceSrcMinModeActionscriptJs,
	"public/ace/src-min/mode-ada.js": publicAceSrcMinModeAdaJs,
	"public/ace/src-min/mode-apache_conf.js": publicAceSrcMinModeApache_confJs,
	"public/ace/src-min/mode-applescript.js": publicAceSrcMinModeApplescriptJs,
	"public/ace/src-min/mode-asciidoc.js": publicAceSrcMinModeAsciidocJs,
	"public/ace/src-min/mode-assembly_x86.js": publicAceSrcMinModeAssembly_x86Js,
	"public/ace/src-min/mode-autohotkey.js": publicAceSrcMinModeAutohotkeyJs,
	"public/ace/src-min/mode-batchfile.js": publicAceSrcMinModeBatchfileJs,
	"public/ace/src-min/mode-bro.js": publicAceSrcMinModeBroJs,
	"public/ace/src-min/mode-c9search.js": publicAceSrcMinModeC9searchJs,
	"public/ace/src-min/mode-c_cpp.js": publicAceSrcMinModeC_cppJs,
	"public/ace/src-min/mode-cirru.js": publicAceSrcMinModeCirruJs,
	"public/ace/src-min/mode-clojure.js": publicAceSrcMinModeClojureJs,
	"public/ace/src-min/mode-cobol.js": publicAceSrcMinModeCobolJs,
	"public/ace/src-min/mode-coffee.js": publicAceSrcMinModeCoffeeJs,
	"public/ace/src-min/mode-coldfusion.js": publicAceSrcMinModeColdfusionJs,
	"public/ace/src-min/mode-csharp.js": publicAceSrcMinModeCsharpJs,
	"public/ace/src-min/mode-css.js": publicAceSrcMinModeCssJs,
	"public/ace/src-min/mode-curly.js": publicAceSrcMinModeCurlyJs,
	"public/ace/src-min/mode-d.js": publicAceSrcMinModeDJs,
	"public/ace/src-min/mode-dart.js": publicAceSrcMinModeDartJs,
	"public/ace/src-min/mode-diff.js": publicAceSrcMinModeDiffJs,
	"public/ace/src-min/mode-django.js": publicAceSrcMinModeDjangoJs,
	"public/ace/src-min/mode-dockerfile.js": publicAceSrcMinModeDockerfileJs,
	"public/ace/src-min/mode-dot.js": publicAceSrcMinModeDotJs,
	"public/ace/src-min/mode-drools.js": publicAceSrcMinModeDroolsJs,
	"public/ace/src-min/mode-eiffel.js": publicAceSrcMinModeEiffelJs,
	"public/ace/src-min/mode-ejs.js": publicAceSrcMinModeEjsJs,
	"public/ace/src-min/mode-elixir.js": publicAceSrcMinModeElixirJs,
	"public/ace/src-min/mode-elm.js": publicAceSrcMinModeElmJs,
	"public/ace/src-min/mode-erlang.js": publicAceSrcMinModeErlangJs,
	"public/ace/src-min/mode-forth.js": publicAceSrcMinModeForthJs,
	"public/ace/src-min/mode-fortran.js": publicAceSrcMinModeFortranJs,
	"public/ace/src-min/mode-ftl.js": publicAceSrcMinModeFtlJs,
	"public/ace/src-min/mode-gcode.js": publicAceSrcMinModeGcodeJs,
	"public/ace/src-min/mode-gherkin.js": publicAceSrcMinModeGherkinJs,
	"public/ace/src-min/mode-gitignore.js": publicAceSrcMinModeGitignoreJs,
	"public/ace/src-min/mode-glsl.js": publicAceSrcMinModeGlslJs,
	"public/ace/src-min/mode-gobstones.js": publicAceSrcMinModeGobstonesJs,
	"public/ace/src-min/mode-golang.js": publicAceSrcMinModeGolangJs,
	"public/ace/src-min/mode-groovy.js": publicAceSrcMinModeGroovyJs,
	"public/ace/src-min/mode-haml.js": publicAceSrcMinModeHamlJs,
	"public/ace/src-min/mode-handlebars.js": publicAceSrcMinModeHandlebarsJs,
	"public/ace/src-min/mode-haskell.js": publicAceSrcMinModeHaskellJs,
	"public/ace/src-min/mode-haskell_cabal.js": publicAceSrcMinModeHaskell_cabalJs,
	"public/ace/src-min/mode-haxe.js": publicAceSrcMinModeHaxeJs,
	"public/ace/src-min/mode-hjson.js": publicAceSrcMinModeHjsonJs,
	"public/ace/src-min/mode-html.js": publicAceSrcMinModeHtmlJs,
	"public/ace/src-min/mode-html_elixir.js": publicAceSrcMinModeHtml_elixirJs,
	"public/ace/src-min/mode-html_ruby.js": publicAceSrcMinModeHtml_rubyJs,
	"public/ace/src-min/mode-ini.js": publicAceSrcMinModeIniJs,
	"public/ace/src-min/mode-io.js": publicAceSrcMinModeIoJs,
	"public/ace/src-min/mode-jack.js": publicAceSrcMinModeJackJs,
	"public/ace/src-min/mode-jade.js": publicAceSrcMinModeJadeJs,
	"public/ace/src-min/mode-java.js": publicAceSrcMinModeJavaJs,
	"public/ace/src-min/mode-javascript.js": publicAceSrcMinModeJavascriptJs,
	"public/ace/src-min/mode-json.js": publicAceSrcMinModeJsonJs,
	"public/ace/src-min/mode-jsoniq.js": publicAceSrcMinModeJsoniqJs,
	"public/ace/src-min/mode-jsp.js": publicAceSrcMinModeJspJs,
	"public/ace/src-min/mode-jsx.js": publicAceSrcMinModeJsxJs,
	"public/ace/src-min/mode-julia.js": publicAceSrcMinModeJuliaJs,
	"public/ace/src-min/mode-kotlin.js": publicAceSrcMinModeKotlinJs,
	"public/ace/src-min/mode-latex.js": publicAceSrcMinModeLatexJs,
	"public/ace/src-min/mode-lean.js": publicAceSrcMinModeLeanJs,
	"public/ace/src-min/mode-less.js": publicAceSrcMinModeLessJs,
	"public/ace/src-min/mode-liquid.js": publicAceSrcMinModeLiquidJs,
	"public/ace/src-min/mode-lisp.js": publicAceSrcMinModeLispJs,
	"public/ace/src-min/mode-live_script.js": publicAceSrcMinModeLive_scriptJs,
	"public/ace/src-min/mode-livescript.js": publicAceSrcMinModeLivescriptJs,
	"public/ace/src-min/mode-logiql.js": publicAceSrcMinModeLogiqlJs,
	"public/ace/src-min/mode-lsl.js": publicAceSrcMinModeLslJs,
	"public/ace/src-min/mode-lua.js": publicAceSrcMinModeLuaJs,
	"public/ace/src-min/mode-luapage.js": publicAceSrcMinModeLuapageJs,
	"public/ace/src-min/mode-lucene.js": publicAceSrcMinModeLuceneJs,
	"public/ace/src-min/mode-makefile.js": publicAceSrcMinModeMakefileJs,
	"public/ace/src-min/mode-markdown.js": publicAceSrcMinModeMarkdownJs,
	"public/ace/src-min/mode-mask.js": publicAceSrcMinModeMaskJs,
	"public/ace/src-min/mode-matlab.js": publicAceSrcMinModeMatlabJs,
	"public/ace/src-min/mode-maze.js": publicAceSrcMinModeMazeJs,
	"public/ace/src-min/mode-mel.js": publicAceSrcMinModeMelJs,
	"public/ace/src-min/mode-mips_assembler.js": publicAceSrcMinModeMips_assemblerJs,
	"public/ace/src-min/mode-mipsassembler.js": publicAceSrcMinModeMipsassemblerJs,
	"public/ace/src-min/mode-mushcode.js": publicAceSrcMinModeMushcodeJs,
	"public/ace/src-min/mode-mysql.js": publicAceSrcMinModeMysqlJs,
	"public/ace/src-min/mode-nix.js": publicAceSrcMinModeNixJs,
	"public/ace/src-min/mode-nsis.js": publicAceSrcMinModeNsisJs,
	"public/ace/src-min/mode-objectivec.js": publicAceSrcMinModeObjectivecJs,
	"public/ace/src-min/mode-ocaml.js": publicAceSrcMinModeOcamlJs,
	"public/ace/src-min/mode-pascal.js": publicAceSrcMinModePascalJs,
	"public/ace/src-min/mode-perl.js": publicAceSrcMinModePerlJs,
	"public/ace/src-min/mode-pgsql.js": publicAceSrcMinModePgsqlJs,
	"public/ace/src-min/mode-php.js": publicAceSrcMinModePhpJs,
	"public/ace/src-min/mode-plain_text.js": publicAceSrcMinModePlain_textJs,
	"public/ace/src-min/mode-powershell.js": publicAceSrcMinModePowershellJs,
	"public/ace/src-min/mode-praat.js": publicAceSrcMinModePraatJs,
	"public/ace/src-min/mode-prolog.js": publicAceSrcMinModePrologJs,
	"public/ace/src-min/mode-properties.js": publicAceSrcMinModePropertiesJs,
	"public/ace/src-min/mode-protobuf.js": publicAceSrcMinModeProtobufJs,
	"public/ace/src-min/mode-python.js": publicAceSrcMinModePythonJs,
	"public/ace/src-min/mode-r.js": publicAceSrcMinModeRJs,
	"public/ace/src-min/mode-razor.js": publicAceSrcMinModeRazorJs,
	"public/ace/src-min/mode-rdoc.js": publicAceSrcMinModeRdocJs,
	"public/ace/src-min/mode-rhtml.js": publicAceSrcMinModeRhtmlJs,
	"public/ace/src-min/mode-rst.js": publicAceSrcMinModeRstJs,
	"public/ace/src-min/mode-ruby.js": publicAceSrcMinModeRubyJs,
	"public/ace/src-min/mode-rust.js": publicAceSrcMinModeRustJs,
	"public/ace/src-min/mode-sass.js": publicAceSrcMinModeSassJs,
	"public/ace/src-min/mode-scad.js": publicAceSrcMinModeScadJs,
	"public/ace/src-min/mode-scala.js": publicAceSrcMinModeScalaJs,
	"public/ace/src-min/mode-scheme.js": publicAceSrcMinModeSchemeJs,
	"public/ace/src-min/mode-scss.js": publicAceSrcMinModeScssJs,
	"public/ace/src-min/mode-sh.js": publicAceSrcMinModeShJs,
	"public/ace/src-min/mode-sjs.js": publicAceSrcMinModeSjsJs,
	"public/ace/src-min/mode-smarty.js": publicAceSrcMinModeSmartyJs,
	"public/ace/src-min/mode-snippets.js": publicAceSrcMinModeSnippetsJs,
	"public/ace/src-min/mode-soy_template.js": publicAceSrcMinModeSoy_templateJs,
	"public/ace/src-min/mode-space.js": publicAceSrcMinModeSpaceJs,
	"public/ace/src-min/mode-sql.js": publicAceSrcMinModeSqlJs,
	"public/ace/src-min/mode-sqlserver.js": publicAceSrcMinModeSqlserverJs,
	"public/ace/src-min/mode-stylus.js": publicAceSrcMinModeStylusJs,
	"public/ace/src-min/mode-svg.js": publicAceSrcMinModeSvgJs,
	"public/ace/src-min/mode-swift.js": publicAceSrcMinModeSwiftJs,
	"public/ace/src-min/mode-swig.js": publicAceSrcMinModeSwigJs,
	"public/ace/src-min/mode-tcl.js": publicAceSrcMinModeTclJs,
	"public/ace/src-min/mode-tex.js": publicAceSrcMinModeTexJs,
	"public/ace/src-min/mode-text.js": publicAceSrcMinModeTextJs,
	"public/ace/src-min/mode-textile.js": publicAceSrcMinModeTextileJs,
	"public/ace/src-min/mode-toml.js": publicAceSrcMinModeTomlJs,
	"public/ace/src-min/mode-tsx.js": publicAceSrcMinModeTsxJs,
	"public/ace/src-min/mode-twig.js": publicAceSrcMinModeTwigJs,
	"public/ace/src-min/mode-typescript.js": publicAceSrcMinModeTypescriptJs,
	"public/ace/src-min/mode-vala.js": publicAceSrcMinModeValaJs,
	"public/ace/src-min/mode-vbscript.js": publicAceSrcMinModeVbscriptJs,
	"public/ace/src-min/mode-velocity.js": publicAceSrcMinModeVelocityJs,
	"public/ace/src-min/mode-verilog.js": publicAceSrcMinModeVerilogJs,
	"public/ace/src-min/mode-vhdl.js": publicAceSrcMinModeVhdlJs,
	"public/ace/src-min/mode-wollok.js": publicAceSrcMinModeWollokJs,
	"public/ace/src-min/mode-xml.js": publicAceSrcMinModeXmlJs,
	"public/ace/src-min/mode-xquery.js": publicAceSrcMinModeXqueryJs,
	"public/ace/src-min/mode-yaml.js": publicAceSrcMinModeYamlJs,
	"public/ace/src-min/snippets/abap.js": publicAceSrcMinSnippetsAbapJs,
	"public/ace/src-min/snippets/abc.js": publicAceSrcMinSnippetsAbcJs,
	"public/ace/src-min/snippets/actionscript.js": publicAceSrcMinSnippetsActionscriptJs,
	"public/ace/src-min/snippets/ada.js": publicAceSrcMinSnippetsAdaJs,
	"public/ace/src-min/snippets/apache_conf.js": publicAceSrcMinSnippetsApache_confJs,
	"public/ace/src-min/snippets/applescript.js": publicAceSrcMinSnippetsApplescriptJs,
	"public/ace/src-min/snippets/asciidoc.js": publicAceSrcMinSnippetsAsciidocJs,
	"public/ace/src-min/snippets/assembly_x86.js": publicAceSrcMinSnippetsAssembly_x86Js,
	"public/ace/src-min/snippets/autohotkey.js": publicAceSrcMinSnippetsAutohotkeyJs,
	"public/ace/src-min/snippets/batchfile.js": publicAceSrcMinSnippetsBatchfileJs,
	"public/ace/src-min/snippets/bro.js": publicAceSrcMinSnippetsBroJs,
	"public/ace/src-min/snippets/c9search.js": publicAceSrcMinSnippetsC9searchJs,
	"public/ace/src-min/snippets/c_cpp.js": publicAceSrcMinSnippetsC_cppJs,
	"public/ace/src-min/snippets/cirru.js": publicAceSrcMinSnippetsCirruJs,
	"public/ace/src-min/snippets/clojure.js": publicAceSrcMinSnippetsClojureJs,
	"public/ace/src-min/snippets/cobol.js": publicAceSrcMinSnippetsCobolJs,
	"public/ace/src-min/snippets/coffee.js": publicAceSrcMinSnippetsCoffeeJs,
	"public/ace/src-min/snippets/coldfusion.js": publicAceSrcMinSnippetsColdfusionJs,
	"public/ace/src-min/snippets/csharp.js": publicAceSrcMinSnippetsCsharpJs,
	"public/ace/src-min/snippets/css.js": publicAceSrcMinSnippetsCssJs,
	"public/ace/src-min/snippets/curly.js": publicAceSrcMinSnippetsCurlyJs,
	"public/ace/src-min/snippets/d.js": publicAceSrcMinSnippetsDJs,
	"public/ace/src-min/snippets/dart.js": publicAceSrcMinSnippetsDartJs,
	"public/ace/src-min/snippets/diff.js": publicAceSrcMinSnippetsDiffJs,
	"public/ace/src-min/snippets/django.js": publicAceSrcMinSnippetsDjangoJs,
	"public/ace/src-min/snippets/dockerfile.js": publicAceSrcMinSnippetsDockerfileJs,
	"public/ace/src-min/snippets/dot.js": publicAceSrcMinSnippetsDotJs,
	"public/ace/src-min/snippets/drools.js": publicAceSrcMinSnippetsDroolsJs,
	"public/ace/src-min/snippets/eiffel.js": publicAceSrcMinSnippetsEiffelJs,
	"public/ace/src-min/snippets/ejs.js": publicAceSrcMinSnippetsEjsJs,
	"public/ace/src-min/snippets/elixir.js": publicAceSrcMinSnippetsElixirJs,
	"public/ace/src-min/snippets/elm.js": publicAceSrcMinSnippetsElmJs,
	"public/ace/src-min/snippets/erlang.js": publicAceSrcMinSnippetsErlangJs,
	"public/ace/src-min/snippets/forth.js": publicAceSrcMinSnippetsForthJs,
	"public/ace/src-min/snippets/fortran.js": publicAceSrcMinSnippetsFortranJs,
	"public/ace/src-min/snippets/ftl.js": publicAceSrcMinSnippetsFtlJs,
	"public/ace/src-min/snippets/gcode.js": publicAceSrcMinSnippetsGcodeJs,
	"public/ace/src-min/snippets/gherkin.js": publicAceSrcMinSnippetsGherkinJs,
	"public/ace/src-min/snippets/gitignore.js": publicAceSrcMinSnippetsGitignoreJs,
	"public/ace/src-min/snippets/glsl.js": publicAceSrcMinSnippetsGlslJs,
	"public/ace/src-min/snippets/gobstones.js": publicAceSrcMinSnippetsGobstonesJs,
	"public/ace/src-min/snippets/golang.js": publicAceSrcMinSnippetsGolangJs,
	"public/ace/src-min/snippets/groovy.js": publicAceSrcMinSnippetsGroovyJs,
	"public/ace/src-min/snippets/haml.js": publicAceSrcMinSnippetsHamlJs,
	"public/ace/src-min/snippets/handlebars.js": publicAceSrcMinSnippetsHandlebarsJs,
	"public/ace/src-min/snippets/haskell.js": publicAceSrcMinSnippetsHaskellJs,
	"public/ace/src-min/snippets/haskell_cabal.js": publicAceSrcMinSnippetsHaskell_cabalJs,
	"public/ace/src-min/snippets/haxe.js": publicAceSrcMinSnippetsHaxeJs,
	"public/ace/src-min/snippets/hjson.js": publicAceSrcMinSnippetsHjsonJs,
	"public/ace/src-min/snippets/html.js": publicAceSrcMinSnippetsHtmlJs,
	"public/ace/src-min/snippets/html_elixir.js": publicAceSrcMinSnippetsHtml_elixirJs,
	"public/ace/src-min/snippets/html_ruby.js": publicAceSrcMinSnippetsHtml_rubyJs,
	"public/ace/src-min/snippets/ini.js": publicAceSrcMinSnippetsIniJs,
	"public/ace/src-min/snippets/io.js": publicAceSrcMinSnippetsIoJs,
	"public/ace/src-min/snippets/jack.js": publicAceSrcMinSnippetsJackJs,
	"public/ace/src-min/snippets/jade.js": publicAceSrcMinSnippetsJadeJs,
	"public/ace/src-min/snippets/java.js": publicAceSrcMinSnippetsJavaJs,
	"public/ace/src-min/snippets/javascript.js": publicAceSrcMinSnippetsJavascriptJs,
	"public/ace/src-min/snippets/json.js": publicAceSrcMinSnippetsJsonJs,
	"public/ace/src-min/snippets/jsoniq.js": publicAceSrcMinSnippetsJsoniqJs,
	"public/ace/src-min/snippets/jsp.js": publicAceSrcMinSnippetsJspJs,
	"public/ace/src-min/snippets/jsx.js": publicAceSrcMinSnippetsJsxJs,
	"public/ace/src-min/snippets/julia.js": publicAceSrcMinSnippetsJuliaJs,
	"public/ace/src-min/snippets/kotlin.js": publicAceSrcMinSnippetsKotlinJs,
	"public/ace/src-min/snippets/latex.js": publicAceSrcMinSnippetsLatexJs,
	"public/ace/src-min/snippets/lean.js": publicAceSrcMinSnippetsLeanJs,
	"public/ace/src-min/snippets/less.js": publicAceSrcMinSnippetsLessJs,
	"public/ace/src-min/snippets/liquid.js": publicAceSrcMinSnippetsLiquidJs,
	"public/ace/src-min/snippets/lisp.js": publicAceSrcMinSnippetsLispJs,
	"public/ace/src-min/snippets/live_script.js": publicAceSrcMinSnippetsLive_scriptJs,
	"public/ace/src-min/snippets/livescript.js": publicAceSrcMinSnippetsLivescriptJs,
	"public/ace/src-min/snippets/logiql.js": publicAceSrcMinSnippetsLogiqlJs,
	"public/ace/src-min/snippets/lsl.js": publicAceSrcMinSnippetsLslJs,
	"public/ace/src-min/snippets/lua.js": publicAceSrcMinSnippetsLuaJs,
	"public/ace/src-min/snippets/luapage.js": publicAceSrcMinSnippetsLuapageJs,
	"public/ace/src-min/snippets/lucene.js": publicAceSrcMinSnippetsLuceneJs,
	"public/ace/src-min/snippets/makefile.js": publicAceSrcMinSnippetsMakefileJs,
	"public/ace/src-min/snippets/markdown.js": publicAceSrcMinSnippetsMarkdownJs,
	"public/ace/src-min/snippets/mask.js": publicAceSrcMinSnippetsMaskJs,
	"public/ace/src-min/snippets/matlab.js": publicAceSrcMinSnippetsMatlabJs,
	"public/ace/src-min/snippets/maze.js": publicAceSrcMinSnippetsMazeJs,
	"public/ace/src-min/snippets/mel.js": publicAceSrcMinSnippetsMelJs,
	"public/ace/src-min/snippets/mips_assembler.js": publicAceSrcMinSnippetsMips_assemblerJs,
	"public/ace/src-min/snippets/mipsassembler.js": publicAceSrcMinSnippetsMipsassemblerJs,
	"public/ace/src-min/snippets/mushcode.js": publicAceSrcMinSnippetsMushcodeJs,
	"public/ace/src-min/snippets/mysql.js": publicAceSrcMinSnippetsMysqlJs,
	"public/ace/src-min/snippets/nix.js": publicAceSrcMinSnippetsNixJs,
	"public/ace/src-min/snippets/nsis.js": publicAceSrcMinSnippetsNsisJs,
	"public/ace/src-min/snippets/objectivec.js": publicAceSrcMinSnippetsObjectivecJs,
	"public/ace/src-min/snippets/ocaml.js": publicAceSrcMinSnippetsOcamlJs,
	"public/ace/src-min/snippets/pascal.js": publicAceSrcMinSnippetsPascalJs,
	"public/ace/src-min/snippets/perl.js": publicAceSrcMinSnippetsPerlJs,
	"public/ace/src-min/snippets/pgsql.js": publicAceSrcMinSnippetsPgsqlJs,
	"public/ace/src-min/snippets/php.js": publicAceSrcMinSnippetsPhpJs,
	"public/ace/src-min/snippets/plain_text.js": publicAceSrcMinSnippetsPlain_textJs,
	"public/ace/src-min/snippets/powershell.js": publicAceSrcMinSnippetsPowershellJs,
	"public/ace/src-min/snippets/praat.js": publicAceSrcMinSnippetsPraatJs,
	"public/ace/src-min/snippets/prolog.js": publicAceSrcMinSnippetsPrologJs,
	"public/ace/src-min/snippets/properties.js": publicAceSrcMinSnippetsPropertiesJs,
	"public/ace/src-min/snippets/protobuf.js": publicAceSrcMinSnippetsProtobufJs,
	"public/ace/src-min/snippets/python.js": publicAceSrcMinSnippetsPythonJs,
	"public/ace/src-min/snippets/r.js": publicAceSrcMinSnippetsRJs,
	"public/ace/src-min/snippets/razor.js": publicAceSrcMinSnippetsRazorJs,
	"public/ace/src-min/snippets/rdoc.js": publicAceSrcMinSnippetsRdocJs,
	"public/ace/src-min/snippets/rhtml.js": publicAceSrcMinSnippetsRhtmlJs,
	"public/ace/src-min/snippets/rst.js": publicAceSrcMinSnippetsRstJs,
	"public/ace/src-min/snippets/ruby.js": publicAceSrcMinSnippetsRubyJs,
	"public/ace/src-min/snippets/rust.js": publicAceSrcMinSnippetsRustJs,
	"public/ace/src-min/snippets/sass.js": publicAceSrcMinSnippetsSassJs,
	"public/ace/src-min/snippets/scad.js": publicAceSrcMinSnippetsScadJs,
	"public/ace/src-min/snippets/scala.js": publicAceSrcMinSnippetsScalaJs,
	"public/ace/src-min/snippets/scheme.js": publicAceSrcMinSnippetsSchemeJs,
	"public/ace/src-min/snippets/scss.js": publicAceSrcMinSnippetsScssJs,
	"public/ace/src-min/snippets/sh.js": publicAceSrcMinSnippetsShJs,
	"public/ace/src-min/snippets/sjs.js": publicAceSrcMinSnippetsSjsJs,
	"public/ace/src-min/snippets/smarty.js": publicAceSrcMinSnippetsSmartyJs,
	"public/ace/src-min/snippets/snippets.js": publicAceSrcMinSnippetsSnippetsJs,
	"public/ace/src-min/snippets/soy_template.js": publicAceSrcMinSnippetsSoy_templateJs,
	"public/ace/src-min/snippets/space.js": publicAceSrcMinSnippetsSpaceJs,
	"public/ace/src-min/snippets/sql.js": publicAceSrcMinSnippetsSqlJs,
	"public/ace/src-min/snippets/sqlserver.js": publicAceSrcMinSnippetsSqlserverJs,
	"public/ace/src-min/snippets/stylus.js": publicAceSrcMinSnippetsStylusJs,
	"public/ace/src-min/snippets/svg.js": publicAceSrcMinSnippetsSvgJs,
	"public/ace/src-min/snippets/swift.js": publicAceSrcMinSnippetsSwiftJs,
	"public/ace/src-min/snippets/swig.js": publicAceSrcMinSnippetsSwigJs,
	"public/ace/src-min/snippets/tcl.js": publicAceSrcMinSnippetsTclJs,
	"public/ace/src-min/snippets/tex.js": publicAceSrcMinSnippetsTexJs,
	"public/ace/src-min/snippets/text.js": publicAceSrcMinSnippetsTextJs,
	"public/ace/src-min/snippets/textile.js": publicAceSrcMinSnippetsTextileJs,
	"public/ace/src-min/snippets/toml.js": publicAceSrcMinSnippetsTomlJs,
	"public/ace/src-min/snippets/tsx.js": publicAceSrcMinSnippetsTsxJs,
	"public/ace/src-min/snippets/twig.js": publicAceSrcMinSnippetsTwigJs,
	"public/ace/src-min/snippets/typescript.js": publicAceSrcMinSnippetsTypescriptJs,
	"public/ace/src-min/snippets/vala.js": publicAceSrcMinSnippetsValaJs,
	"public/ace/src-min/snippets/vbscript.js": publicAceSrcMinSnippetsVbscriptJs,
	"public/ace/src-min/snippets/velocity.js": publicAceSrcMinSnippetsVelocityJs,
	"public/ace/src-min/snippets/verilog.js": publicAceSrcMinSnippetsVerilogJs,
	"public/ace/src-min/snippets/vhdl.js": publicAceSrcMinSnippetsVhdlJs,
	"public/ace/src-min/snippets/wollok.js": publicAceSrcMinSnippetsWollokJs,
	"public/ace/src-min/snippets/xml.js": publicAceSrcMinSnippetsXmlJs,
	"public/ace/src-min/snippets/xquery.js": publicAceSrcMinSnippetsXqueryJs,
	"public/ace/src-min/snippets/yaml.js": publicAceSrcMinSnippetsYamlJs,
	"public/ace/src-min/theme-github.js": publicAceSrcMinThemeGithubJs,
	"public/ace/src-min/worker-coffee.js": publicAceSrcMinWorkerCoffeeJs,
	"public/ace/src-min/worker-css.js": publicAceSrcMinWorkerCssJs,
	"public/ace/src-min/worker-html.js": publicAceSrcMinWorkerHtmlJs,
	"public/ace/src-min/worker-javascript.js": publicAceSrcMinWorkerJavascriptJs,
	"public/ace/src-min/worker-json.js": publicAceSrcMinWorkerJsonJs,
	"public/ace/src-min/worker-lua.js": publicAceSrcMinWorkerLuaJs,
	"public/ace/src-min/worker-php.js": publicAceSrcMinWorkerPhpJs,
	"public/ace/src-min/worker-xml.js": publicAceSrcMinWorkerXmlJs,
	"public/ace/src-min/worker-xquery.js": publicAceSrcMinWorkerXqueryJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"ace": &bintree{nil, map[string]*bintree{
			"src-min": &bintree{nil, map[string]*bintree{
				"ace.js": &bintree{publicAceSrcMinAceJs, map[string]*bintree{}},
				"ext-beautify.js": &bintree{publicAceSrcMinExtBeautifyJs, map[string]*bintree{}},
				"ext-chromevox.js": &bintree{publicAceSrcMinExtChromevoxJs, map[string]*bintree{}},
				"ext-elastic_tabstops_lite.js": &bintree{publicAceSrcMinExtElastic_tabstops_liteJs, map[string]*bintree{}},
				"ext-emmet.js": &bintree{publicAceSrcMinExtEmmetJs, map[string]*bintree{}},
				"ext-error_marker.js": &bintree{publicAceSrcMinExtError_markerJs, map[string]*bintree{}},
				"ext-keybinding_menu.js": &bintree{publicAceSrcMinExtKeybinding_menuJs, map[string]*bintree{}},
				"ext-language_tools.js": &bintree{publicAceSrcMinExtLanguage_toolsJs, map[string]*bintree{}},
				"ext-linking.js": &bintree{publicAceSrcMinExtLinkingJs, map[string]*bintree{}},
				"ext-modelist.js": &bintree{publicAceSrcMinExtModelistJs, map[string]*bintree{}},
				"ext-old_ie.js": &bintree{publicAceSrcMinExtOld_ieJs, map[string]*bintree{}},
				"ext-searchbox.js": &bintree{publicAceSrcMinExtSearchboxJs, map[string]*bintree{}},
				"ext-settings_menu.js": &bintree{publicAceSrcMinExtSettings_menuJs, map[string]*bintree{}},
				"ext-spellcheck.js": &bintree{publicAceSrcMinExtSpellcheckJs, map[string]*bintree{}},
				"ext-split.js": &bintree{publicAceSrcMinExtSplitJs, map[string]*bintree{}},
				"ext-static_highlight.js": &bintree{publicAceSrcMinExtStatic_highlightJs, map[string]*bintree{}},
				"ext-statusbar.js": &bintree{publicAceSrcMinExtStatusbarJs, map[string]*bintree{}},
				"ext-textarea.js": &bintree{publicAceSrcMinExtTextareaJs, map[string]*bintree{}},
				"ext-themelist.js": &bintree{publicAceSrcMinExtThemelistJs, map[string]*bintree{}},
				"ext-whitespace.js": &bintree{publicAceSrcMinExtWhitespaceJs, map[string]*bintree{}},
				"keybinding-emacs.js": &bintree{publicAceSrcMinKeybindingEmacsJs, map[string]*bintree{}},
				"keybinding-vim.js": &bintree{publicAceSrcMinKeybindingVimJs, map[string]*bintree{}},
				"mode-abap.js": &bintree{publicAceSrcMinModeAbapJs, map[string]*bintree{}},
				"mode-abc.js": &bintree{publicAceSrcMinModeAbcJs, map[string]*bintree{}},
				"mode-actionscript.js": &bintree{publicAceSrcMinModeActionscriptJs, map[string]*bintree{}},
				"mode-ada.js": &bintree{publicAceSrcMinModeAdaJs, map[string]*bintree{}},
				"mode-apache_conf.js": &bintree{publicAceSrcMinModeApache_confJs, map[string]*bintree{}},
				"mode-applescript.js": &bintree{publicAceSrcMinModeApplescriptJs, map[string]*bintree{}},
				"mode-asciidoc.js": &bintree{publicAceSrcMinModeAsciidocJs, map[string]*bintree{}},
				"mode-assembly_x86.js": &bintree{publicAceSrcMinModeAssembly_x86Js, map[string]*bintree{}},
				"mode-autohotkey.js": &bintree{publicAceSrcMinModeAutohotkeyJs, map[string]*bintree{}},
				"mode-batchfile.js": &bintree{publicAceSrcMinModeBatchfileJs, map[string]*bintree{}},
				"mode-bro.js": &bintree{publicAceSrcMinModeBroJs, map[string]*bintree{}},
				"mode-c9search.js": &bintree{publicAceSrcMinModeC9searchJs, map[string]*bintree{}},
				"mode-c_cpp.js": &bintree{publicAceSrcMinModeC_cppJs, map[string]*bintree{}},
				"mode-cirru.js": &bintree{publicAceSrcMinModeCirruJs, map[string]*bintree{}},
				"mode-clojure.js": &bintree{publicAceSrcMinModeClojureJs, map[string]*bintree{}},
				"mode-cobol.js": &bintree{publicAceSrcMinModeCobolJs, map[string]*bintree{}},
				"mode-coffee.js": &bintree{publicAceSrcMinModeCoffeeJs, map[string]*bintree{}},
				"mode-coldfusion.js": &bintree{publicAceSrcMinModeColdfusionJs, map[string]*bintree{}},
				"mode-csharp.js": &bintree{publicAceSrcMinModeCsharpJs, map[string]*bintree{}},
				"mode-css.js": &bintree{publicAceSrcMinModeCssJs, map[string]*bintree{}},
				"mode-curly.js": &bintree{publicAceSrcMinModeCurlyJs, map[string]*bintree{}},
				"mode-d.js": &bintree{publicAceSrcMinModeDJs, map[string]*bintree{}},
				"mode-dart.js": &bintree{publicAceSrcMinModeDartJs, map[string]*bintree{}},
				"mode-diff.js": &bintree{publicAceSrcMinModeDiffJs, map[string]*bintree{}},
				"mode-django.js": &bintree{publicAceSrcMinModeDjangoJs, map[string]*bintree{}},
				"mode-dockerfile.js": &bintree{publicAceSrcMinModeDockerfileJs, map[string]*bintree{}},
				"mode-dot.js": &bintree{publicAceSrcMinModeDotJs, map[string]*bintree{}},
				"mode-drools.js": &bintree{publicAceSrcMinModeDroolsJs, map[string]*bintree{}},
				"mode-eiffel.js": &bintree{publicAceSrcMinModeEiffelJs, map[string]*bintree{}},
				"mode-ejs.js": &bintree{publicAceSrcMinModeEjsJs, map[string]*bintree{}},
				"mode-elixir.js": &bintree{publicAceSrcMinModeElixirJs, map[string]*bintree{}},
				"mode-elm.js": &bintree{publicAceSrcMinModeElmJs, map[string]*bintree{}},
				"mode-erlang.js": &bintree{publicAceSrcMinModeErlangJs, map[string]*bintree{}},
				"mode-forth.js": &bintree{publicAceSrcMinModeForthJs, map[string]*bintree{}},
				"mode-fortran.js": &bintree{publicAceSrcMinModeFortranJs, map[string]*bintree{}},
				"mode-ftl.js": &bintree{publicAceSrcMinModeFtlJs, map[string]*bintree{}},
				"mode-gcode.js": &bintree{publicAceSrcMinModeGcodeJs, map[string]*bintree{}},
				"mode-gherkin.js": &bintree{publicAceSrcMinModeGherkinJs, map[string]*bintree{}},
				"mode-gitignore.js": &bintree{publicAceSrcMinModeGitignoreJs, map[string]*bintree{}},
				"mode-glsl.js": &bintree{publicAceSrcMinModeGlslJs, map[string]*bintree{}},
				"mode-gobstones.js": &bintree{publicAceSrcMinModeGobstonesJs, map[string]*bintree{}},
				"mode-golang.js": &bintree{publicAceSrcMinModeGolangJs, map[string]*bintree{}},
				"mode-groovy.js": &bintree{publicAceSrcMinModeGroovyJs, map[string]*bintree{}},
				"mode-haml.js": &bintree{publicAceSrcMinModeHamlJs, map[string]*bintree{}},
				"mode-handlebars.js": &bintree{publicAceSrcMinModeHandlebarsJs, map[string]*bintree{}},
				"mode-haskell.js": &bintree{publicAceSrcMinModeHaskellJs, map[string]*bintree{}},
				"mode-haskell_cabal.js": &bintree{publicAceSrcMinModeHaskell_cabalJs, map[string]*bintree{}},
				"mode-haxe.js": &bintree{publicAceSrcMinModeHaxeJs, map[string]*bintree{}},
				"mode-hjson.js": &bintree{publicAceSrcMinModeHjsonJs, map[string]*bintree{}},
				"mode-html.js": &bintree{publicAceSrcMinModeHtmlJs, map[string]*bintree{}},
				"mode-html_elixir.js": &bintree{publicAceSrcMinModeHtml_elixirJs, map[string]*bintree{}},
				"mode-html_ruby.js": &bintree{publicAceSrcMinModeHtml_rubyJs, map[string]*bintree{}},
				"mode-ini.js": &bintree{publicAceSrcMinModeIniJs, map[string]*bintree{}},
				"mode-io.js": &bintree{publicAceSrcMinModeIoJs, map[string]*bintree{}},
				"mode-jack.js": &bintree{publicAceSrcMinModeJackJs, map[string]*bintree{}},
				"mode-jade.js": &bintree{publicAceSrcMinModeJadeJs, map[string]*bintree{}},
				"mode-java.js": &bintree{publicAceSrcMinModeJavaJs, map[string]*bintree{}},
				"mode-javascript.js": &bintree{publicAceSrcMinModeJavascriptJs, map[string]*bintree{}},
				"mode-json.js": &bintree{publicAceSrcMinModeJsonJs, map[string]*bintree{}},
				"mode-jsoniq.js": &bintree{publicAceSrcMinModeJsoniqJs, map[string]*bintree{}},
				"mode-jsp.js": &bintree{publicAceSrcMinModeJspJs, map[string]*bintree{}},
				"mode-jsx.js": &bintree{publicAceSrcMinModeJsxJs, map[string]*bintree{}},
				"mode-julia.js": &bintree{publicAceSrcMinModeJuliaJs, map[string]*bintree{}},
				"mode-kotlin.js": &bintree{publicAceSrcMinModeKotlinJs, map[string]*bintree{}},
				"mode-latex.js": &bintree{publicAceSrcMinModeLatexJs, map[string]*bintree{}},
				"mode-lean.js": &bintree{publicAceSrcMinModeLeanJs, map[string]*bintree{}},
				"mode-less.js": &bintree{publicAceSrcMinModeLessJs, map[string]*bintree{}},
				"mode-liquid.js": &bintree{publicAceSrcMinModeLiquidJs, map[string]*bintree{}},
				"mode-lisp.js": &bintree{publicAceSrcMinModeLispJs, map[string]*bintree{}},
				"mode-live_script.js": &bintree{publicAceSrcMinModeLive_scriptJs, map[string]*bintree{}},
				"mode-livescript.js": &bintree{publicAceSrcMinModeLivescriptJs, map[string]*bintree{}},
				"mode-logiql.js": &bintree{publicAceSrcMinModeLogiqlJs, map[string]*bintree{}},
				"mode-lsl.js": &bintree{publicAceSrcMinModeLslJs, map[string]*bintree{}},
				"mode-lua.js": &bintree{publicAceSrcMinModeLuaJs, map[string]*bintree{}},
				"mode-luapage.js": &bintree{publicAceSrcMinModeLuapageJs, map[string]*bintree{}},
				"mode-lucene.js": &bintree{publicAceSrcMinModeLuceneJs, map[string]*bintree{}},
				"mode-makefile.js": &bintree{publicAceSrcMinModeMakefileJs, map[string]*bintree{}},
				"mode-markdown.js": &bintree{publicAceSrcMinModeMarkdownJs, map[string]*bintree{}},
				"mode-mask.js": &bintree{publicAceSrcMinModeMaskJs, map[string]*bintree{}},
				"mode-matlab.js": &bintree{publicAceSrcMinModeMatlabJs, map[string]*bintree{}},
				"mode-maze.js": &bintree{publicAceSrcMinModeMazeJs, map[string]*bintree{}},
				"mode-mel.js": &bintree{publicAceSrcMinModeMelJs, map[string]*bintree{}},
				"mode-mips_assembler.js": &bintree{publicAceSrcMinModeMips_assemblerJs, map[string]*bintree{}},
				"mode-mipsassembler.js": &bintree{publicAceSrcMinModeMipsassemblerJs, map[string]*bintree{}},
				"mode-mushcode.js": &bintree{publicAceSrcMinModeMushcodeJs, map[string]*bintree{}},
				"mode-mysql.js": &bintree{publicAceSrcMinModeMysqlJs, map[string]*bintree{}},
				"mode-nix.js": &bintree{publicAceSrcMinModeNixJs, map[string]*bintree{}},
				"mode-nsis.js": &bintree{publicAceSrcMinModeNsisJs, map[string]*bintree{}},
				"mode-objectivec.js": &bintree{publicAceSrcMinModeObjectivecJs, map[string]*bintree{}},
				"mode-ocaml.js": &bintree{publicAceSrcMinModeOcamlJs, map[string]*bintree{}},
				"mode-pascal.js": &bintree{publicAceSrcMinModePascalJs, map[string]*bintree{}},
				"mode-perl.js": &bintree{publicAceSrcMinModePerlJs, map[string]*bintree{}},
				"mode-pgsql.js": &bintree{publicAceSrcMinModePgsqlJs, map[string]*bintree{}},
				"mode-php.js": &bintree{publicAceSrcMinModePhpJs, map[string]*bintree{}},
				"mode-plain_text.js": &bintree{publicAceSrcMinModePlain_textJs, map[string]*bintree{}},
				"mode-powershell.js": &bintree{publicAceSrcMinModePowershellJs, map[string]*bintree{}},
				"mode-praat.js": &bintree{publicAceSrcMinModePraatJs, map[string]*bintree{}},
				"mode-prolog.js": &bintree{publicAceSrcMinModePrologJs, map[string]*bintree{}},
				"mode-properties.js": &bintree{publicAceSrcMinModePropertiesJs, map[string]*bintree{}},
				"mode-protobuf.js": &bintree{publicAceSrcMinModeProtobufJs, map[string]*bintree{}},
				"mode-python.js": &bintree{publicAceSrcMinModePythonJs, map[string]*bintree{}},
				"mode-r.js": &bintree{publicAceSrcMinModeRJs, map[string]*bintree{}},
				"mode-razor.js": &bintree{publicAceSrcMinModeRazorJs, map[string]*bintree{}},
				"mode-rdoc.js": &bintree{publicAceSrcMinModeRdocJs, map[string]*bintree{}},
				"mode-rhtml.js": &bintree{publicAceSrcMinModeRhtmlJs, map[string]*bintree{}},
				"mode-rst.js": &bintree{publicAceSrcMinModeRstJs, map[string]*bintree{}},
				"mode-ruby.js": &bintree{publicAceSrcMinModeRubyJs, map[string]*bintree{}},
				"mode-rust.js": &bintree{publicAceSrcMinModeRustJs, map[string]*bintree{}},
				"mode-sass.js": &bintree{publicAceSrcMinModeSassJs, map[string]*bintree{}},
				"mode-scad.js": &bintree{publicAceSrcMinModeScadJs, map[string]*bintree{}},
				"mode-scala.js": &bintree{publicAceSrcMinModeScalaJs, map[string]*bintree{}},
				"mode-scheme.js": &bintree{publicAceSrcMinModeSchemeJs, map[string]*bintree{}},
				"mode-scss.js": &bintree{publicAceSrcMinModeScssJs, map[string]*bintree{}},
				"mode-sh.js": &bintree{publicAceSrcMinModeShJs, map[string]*bintree{}},
				"mode-sjs.js": &bintree{publicAceSrcMinModeSjsJs, map[string]*bintree{}},
				"mode-smarty.js": &bintree{publicAceSrcMinModeSmartyJs, map[string]*bintree{}},
				"mode-snippets.js": &bintree{publicAceSrcMinModeSnippetsJs, map[string]*bintree{}},
				"mode-soy_template.js": &bintree{publicAceSrcMinModeSoy_templateJs, map[string]*bintree{}},
				"mode-space.js": &bintree{publicAceSrcMinModeSpaceJs, map[string]*bintree{}},
				"mode-sql.js": &bintree{publicAceSrcMinModeSqlJs, map[string]*bintree{}},
				"mode-sqlserver.js": &bintree{publicAceSrcMinModeSqlserverJs, map[string]*bintree{}},
				"mode-stylus.js": &bintree{publicAceSrcMinModeStylusJs, map[string]*bintree{}},
				"mode-svg.js": &bintree{publicAceSrcMinModeSvgJs, map[string]*bintree{}},
				"mode-swift.js": &bintree{publicAceSrcMinModeSwiftJs, map[string]*bintree{}},
				"mode-swig.js": &bintree{publicAceSrcMinModeSwigJs, map[string]*bintree{}},
				"mode-tcl.js": &bintree{publicAceSrcMinModeTclJs, map[string]*bintree{}},
				"mode-tex.js": &bintree{publicAceSrcMinModeTexJs, map[string]*bintree{}},
				"mode-text.js": &bintree{publicAceSrcMinModeTextJs, map[string]*bintree{}},
				"mode-textile.js": &bintree{publicAceSrcMinModeTextileJs, map[string]*bintree{}},
				"mode-toml.js": &bintree{publicAceSrcMinModeTomlJs, map[string]*bintree{}},
				"mode-tsx.js": &bintree{publicAceSrcMinModeTsxJs, map[string]*bintree{}},
				"mode-twig.js": &bintree{publicAceSrcMinModeTwigJs, map[string]*bintree{}},
				"mode-typescript.js": &bintree{publicAceSrcMinModeTypescriptJs, map[string]*bintree{}},
				"mode-vala.js": &bintree{publicAceSrcMinModeValaJs, map[string]*bintree{}},
				"mode-vbscript.js": &bintree{publicAceSrcMinModeVbscriptJs, map[string]*bintree{}},
				"mode-velocity.js": &bintree{publicAceSrcMinModeVelocityJs, map[string]*bintree{}},
				"mode-verilog.js": &bintree{publicAceSrcMinModeVerilogJs, map[string]*bintree{}},
				"mode-vhdl.js": &bintree{publicAceSrcMinModeVhdlJs, map[string]*bintree{}},
				"mode-wollok.js": &bintree{publicAceSrcMinModeWollokJs, map[string]*bintree{}},
				"mode-xml.js": &bintree{publicAceSrcMinModeXmlJs, map[string]*bintree{}},
				"mode-xquery.js": &bintree{publicAceSrcMinModeXqueryJs, map[string]*bintree{}},
				"mode-yaml.js": &bintree{publicAceSrcMinModeYamlJs, map[string]*bintree{}},
				"snippets": &bintree{nil, map[string]*bintree{
					"abap.js": &bintree{publicAceSrcMinSnippetsAbapJs, map[string]*bintree{}},
					"abc.js": &bintree{publicAceSrcMinSnippetsAbcJs, map[string]*bintree{}},
					"actionscript.js": &bintree{publicAceSrcMinSnippetsActionscriptJs, map[string]*bintree{}},
					"ada.js": &bintree{publicAceSrcMinSnippetsAdaJs, map[string]*bintree{}},
					"apache_conf.js": &bintree{publicAceSrcMinSnippetsApache_confJs, map[string]*bintree{}},
					"applescript.js": &bintree{publicAceSrcMinSnippetsApplescriptJs, map[string]*bintree{}},
					"asciidoc.js": &bintree{publicAceSrcMinSnippetsAsciidocJs, map[string]*bintree{}},
					"assembly_x86.js": &bintree{publicAceSrcMinSnippetsAssembly_x86Js, map[string]*bintree{}},
					"autohotkey.js": &bintree{publicAceSrcMinSnippetsAutohotkeyJs, map[string]*bintree{}},
					"batchfile.js": &bintree{publicAceSrcMinSnippetsBatchfileJs, map[string]*bintree{}},
					"bro.js": &bintree{publicAceSrcMinSnippetsBroJs, map[string]*bintree{}},
					"c9search.js": &bintree{publicAceSrcMinSnippetsC9searchJs, map[string]*bintree{}},
					"c_cpp.js": &bintree{publicAceSrcMinSnippetsC_cppJs, map[string]*bintree{}},
					"cirru.js": &bintree{publicAceSrcMinSnippetsCirruJs, map[string]*bintree{}},
					"clojure.js": &bintree{publicAceSrcMinSnippetsClojureJs, map[string]*bintree{}},
					"cobol.js": &bintree{publicAceSrcMinSnippetsCobolJs, map[string]*bintree{}},
					"coffee.js": &bintree{publicAceSrcMinSnippetsCoffeeJs, map[string]*bintree{}},
					"coldfusion.js": &bintree{publicAceSrcMinSnippetsColdfusionJs, map[string]*bintree{}},
					"csharp.js": &bintree{publicAceSrcMinSnippetsCsharpJs, map[string]*bintree{}},
					"css.js": &bintree{publicAceSrcMinSnippetsCssJs, map[string]*bintree{}},
					"curly.js": &bintree{publicAceSrcMinSnippetsCurlyJs, map[string]*bintree{}},
					"d.js": &bintree{publicAceSrcMinSnippetsDJs, map[string]*bintree{}},
					"dart.js": &bintree{publicAceSrcMinSnippetsDartJs, map[string]*bintree{}},
					"diff.js": &bintree{publicAceSrcMinSnippetsDiffJs, map[string]*bintree{}},
					"django.js": &bintree{publicAceSrcMinSnippetsDjangoJs, map[string]*bintree{}},
					"dockerfile.js": &bintree{publicAceSrcMinSnippetsDockerfileJs, map[string]*bintree{}},
					"dot.js": &bintree{publicAceSrcMinSnippetsDotJs, map[string]*bintree{}},
					"drools.js": &bintree{publicAceSrcMinSnippetsDroolsJs, map[string]*bintree{}},
					"eiffel.js": &bintree{publicAceSrcMinSnippetsEiffelJs, map[string]*bintree{}},
					"ejs.js": &bintree{publicAceSrcMinSnippetsEjsJs, map[string]*bintree{}},
					"elixir.js": &bintree{publicAceSrcMinSnippetsElixirJs, map[string]*bintree{}},
					"elm.js": &bintree{publicAceSrcMinSnippetsElmJs, map[string]*bintree{}},
					"erlang.js": &bintree{publicAceSrcMinSnippetsErlangJs, map[string]*bintree{}},
					"forth.js": &bintree{publicAceSrcMinSnippetsForthJs, map[string]*bintree{}},
					"fortran.js": &bintree{publicAceSrcMinSnippetsFortranJs, map[string]*bintree{}},
					"ftl.js": &bintree{publicAceSrcMinSnippetsFtlJs, map[string]*bintree{}},
					"gcode.js": &bintree{publicAceSrcMinSnippetsGcodeJs, map[string]*bintree{}},
					"gherkin.js": &bintree{publicAceSrcMinSnippetsGherkinJs, map[string]*bintree{}},
					"gitignore.js": &bintree{publicAceSrcMinSnippetsGitignoreJs, map[string]*bintree{}},
					"glsl.js": &bintree{publicAceSrcMinSnippetsGlslJs, map[string]*bintree{}},
					"gobstones.js": &bintree{publicAceSrcMinSnippetsGobstonesJs, map[string]*bintree{}},
					"golang.js": &bintree{publicAceSrcMinSnippetsGolangJs, map[string]*bintree{}},
					"groovy.js": &bintree{publicAceSrcMinSnippetsGroovyJs, map[string]*bintree{}},
					"haml.js": &bintree{publicAceSrcMinSnippetsHamlJs, map[string]*bintree{}},
					"handlebars.js": &bintree{publicAceSrcMinSnippetsHandlebarsJs, map[string]*bintree{}},
					"haskell.js": &bintree{publicAceSrcMinSnippetsHaskellJs, map[string]*bintree{}},
					"haskell_cabal.js": &bintree{publicAceSrcMinSnippetsHaskell_cabalJs, map[string]*bintree{}},
					"haxe.js": &bintree{publicAceSrcMinSnippetsHaxeJs, map[string]*bintree{}},
					"hjson.js": &bintree{publicAceSrcMinSnippetsHjsonJs, map[string]*bintree{}},
					"html.js": &bintree{publicAceSrcMinSnippetsHtmlJs, map[string]*bintree{}},
					"html_elixir.js": &bintree{publicAceSrcMinSnippetsHtml_elixirJs, map[string]*bintree{}},
					"html_ruby.js": &bintree{publicAceSrcMinSnippetsHtml_rubyJs, map[string]*bintree{}},
					"ini.js": &bintree{publicAceSrcMinSnippetsIniJs, map[string]*bintree{}},
					"io.js": &bintree{publicAceSrcMinSnippetsIoJs, map[string]*bintree{}},
					"jack.js": &bintree{publicAceSrcMinSnippetsJackJs, map[string]*bintree{}},
					"jade.js": &bintree{publicAceSrcMinSnippetsJadeJs, map[string]*bintree{}},
					"java.js": &bintree{publicAceSrcMinSnippetsJavaJs, map[string]*bintree{}},
					"javascript.js": &bintree{publicAceSrcMinSnippetsJavascriptJs, map[string]*bintree{}},
					"json.js": &bintree{publicAceSrcMinSnippetsJsonJs, map[string]*bintree{}},
					"jsoniq.js": &bintree{publicAceSrcMinSnippetsJsoniqJs, map[string]*bintree{}},
					"jsp.js": &bintree{publicAceSrcMinSnippetsJspJs, map[string]*bintree{}},
					"jsx.js": &bintree{publicAceSrcMinSnippetsJsxJs, map[string]*bintree{}},
					"julia.js": &bintree{publicAceSrcMinSnippetsJuliaJs, map[string]*bintree{}},
					"kotlin.js": &bintree{publicAceSrcMinSnippetsKotlinJs, map[string]*bintree{}},
					"latex.js": &bintree{publicAceSrcMinSnippetsLatexJs, map[string]*bintree{}},
					"lean.js": &bintree{publicAceSrcMinSnippetsLeanJs, map[string]*bintree{}},
					"less.js": &bintree{publicAceSrcMinSnippetsLessJs, map[string]*bintree{}},
					"liquid.js": &bintree{publicAceSrcMinSnippetsLiquidJs, map[string]*bintree{}},
					"lisp.js": &bintree{publicAceSrcMinSnippetsLispJs, map[string]*bintree{}},
					"live_script.js": &bintree{publicAceSrcMinSnippetsLive_scriptJs, map[string]*bintree{}},
					"livescript.js": &bintree{publicAceSrcMinSnippetsLivescriptJs, map[string]*bintree{}},
					"logiql.js": &bintree{publicAceSrcMinSnippetsLogiqlJs, map[string]*bintree{}},
					"lsl.js": &bintree{publicAceSrcMinSnippetsLslJs, map[string]*bintree{}},
					"lua.js": &bintree{publicAceSrcMinSnippetsLuaJs, map[string]*bintree{}},
					"luapage.js": &bintree{publicAceSrcMinSnippetsLuapageJs, map[string]*bintree{}},
					"lucene.js": &bintree{publicAceSrcMinSnippetsLuceneJs, map[string]*bintree{}},
					"makefile.js": &bintree{publicAceSrcMinSnippetsMakefileJs, map[string]*bintree{}},
					"markdown.js": &bintree{publicAceSrcMinSnippetsMarkdownJs, map[string]*bintree{}},
					"mask.js": &bintree{publicAceSrcMinSnippetsMaskJs, map[string]*bintree{}},
					"matlab.js": &bintree{publicAceSrcMinSnippetsMatlabJs, map[string]*bintree{}},
					"maze.js": &bintree{publicAceSrcMinSnippetsMazeJs, map[string]*bintree{}},
					"mel.js": &bintree{publicAceSrcMinSnippetsMelJs, map[string]*bintree{}},
					"mips_assembler.js": &bintree{publicAceSrcMinSnippetsMips_assemblerJs, map[string]*bintree{}},
					"mipsassembler.js": &bintree{publicAceSrcMinSnippetsMipsassemblerJs, map[string]*bintree{}},
					"mushcode.js": &bintree{publicAceSrcMinSnippetsMushcodeJs, map[string]*bintree{}},
					"mysql.js": &bintree{publicAceSrcMinSnippetsMysqlJs, map[string]*bintree{}},
					"nix.js": &bintree{publicAceSrcMinSnippetsNixJs, map[string]*bintree{}},
					"nsis.js": &bintree{publicAceSrcMinSnippetsNsisJs, map[string]*bintree{}},
					"objectivec.js": &bintree{publicAceSrcMinSnippetsObjectivecJs, map[string]*bintree{}},
					"ocaml.js": &bintree{publicAceSrcMinSnippetsOcamlJs, map[string]*bintree{}},
					"pascal.js": &bintree{publicAceSrcMinSnippetsPascalJs, map[string]*bintree{}},
					"perl.js": &bintree{publicAceSrcMinSnippetsPerlJs, map[string]*bintree{}},
					"pgsql.js": &bintree{publicAceSrcMinSnippetsPgsqlJs, map[string]*bintree{}},
					"php.js": &bintree{publicAceSrcMinSnippetsPhpJs, map[string]*bintree{}},
					"plain_text.js": &bintree{publicAceSrcMinSnippetsPlain_textJs, map[string]*bintree{}},
					"powershell.js": &bintree{publicAceSrcMinSnippetsPowershellJs, map[string]*bintree{}},
					"praat.js": &bintree{publicAceSrcMinSnippetsPraatJs, map[string]*bintree{}},
					"prolog.js": &bintree{publicAceSrcMinSnippetsPrologJs, map[string]*bintree{}},
					"properties.js": &bintree{publicAceSrcMinSnippetsPropertiesJs, map[string]*bintree{}},
					"protobuf.js": &bintree{publicAceSrcMinSnippetsProtobufJs, map[string]*bintree{}},
					"python.js": &bintree{publicAceSrcMinSnippetsPythonJs, map[string]*bintree{}},
					"r.js": &bintree{publicAceSrcMinSnippetsRJs, map[string]*bintree{}},
					"razor.js": &bintree{publicAceSrcMinSnippetsRazorJs, map[string]*bintree{}},
					"rdoc.js": &bintree{publicAceSrcMinSnippetsRdocJs, map[string]*bintree{}},
					"rhtml.js": &bintree{publicAceSrcMinSnippetsRhtmlJs, map[string]*bintree{}},
					"rst.js": &bintree{publicAceSrcMinSnippetsRstJs, map[string]*bintree{}},
					"ruby.js": &bintree{publicAceSrcMinSnippetsRubyJs, map[string]*bintree{}},
					"rust.js": &bintree{publicAceSrcMinSnippetsRustJs, map[string]*bintree{}},
					"sass.js": &bintree{publicAceSrcMinSnippetsSassJs, map[string]*bintree{}},
					"scad.js": &bintree{publicAceSrcMinSnippetsScadJs, map[string]*bintree{}},
					"scala.js": &bintree{publicAceSrcMinSnippetsScalaJs, map[string]*bintree{}},
					"scheme.js": &bintree{publicAceSrcMinSnippetsSchemeJs, map[string]*bintree{}},
					"scss.js": &bintree{publicAceSrcMinSnippetsScssJs, map[string]*bintree{}},
					"sh.js": &bintree{publicAceSrcMinSnippetsShJs, map[string]*bintree{}},
					"sjs.js": &bintree{publicAceSrcMinSnippetsSjsJs, map[string]*bintree{}},
					"smarty.js": &bintree{publicAceSrcMinSnippetsSmartyJs, map[string]*bintree{}},
					"snippets.js": &bintree{publicAceSrcMinSnippetsSnippetsJs, map[string]*bintree{}},
					"soy_template.js": &bintree{publicAceSrcMinSnippetsSoy_templateJs, map[string]*bintree{}},
					"space.js": &bintree{publicAceSrcMinSnippetsSpaceJs, map[string]*bintree{}},
					"sql.js": &bintree{publicAceSrcMinSnippetsSqlJs, map[string]*bintree{}},
					"sqlserver.js": &bintree{publicAceSrcMinSnippetsSqlserverJs, map[string]*bintree{}},
					"stylus.js": &bintree{publicAceSrcMinSnippetsStylusJs, map[string]*bintree{}},
					"svg.js": &bintree{publicAceSrcMinSnippetsSvgJs, map[string]*bintree{}},
					"swift.js": &bintree{publicAceSrcMinSnippetsSwiftJs, map[string]*bintree{}},
					"swig.js": &bintree{publicAceSrcMinSnippetsSwigJs, map[string]*bintree{}},
					"tcl.js": &bintree{publicAceSrcMinSnippetsTclJs, map[string]*bintree{}},
					"tex.js": &bintree{publicAceSrcMinSnippetsTexJs, map[string]*bintree{}},
					"text.js": &bintree{publicAceSrcMinSnippetsTextJs, map[string]*bintree{}},
					"textile.js": &bintree{publicAceSrcMinSnippetsTextileJs, map[string]*bintree{}},
					"toml.js": &bintree{publicAceSrcMinSnippetsTomlJs, map[string]*bintree{}},
					"tsx.js": &bintree{publicAceSrcMinSnippetsTsxJs, map[string]*bintree{}},
					"twig.js": &bintree{publicAceSrcMinSnippetsTwigJs, map[string]*bintree{}},
					"typescript.js": &bintree{publicAceSrcMinSnippetsTypescriptJs, map[string]*bintree{}},
					"vala.js": &bintree{publicAceSrcMinSnippetsValaJs, map[string]*bintree{}},
					"vbscript.js": &bintree{publicAceSrcMinSnippetsVbscriptJs, map[string]*bintree{}},
					"velocity.js": &bintree{publicAceSrcMinSnippetsVelocityJs, map[string]*bintree{}},
					"verilog.js": &bintree{publicAceSrcMinSnippetsVerilogJs, map[string]*bintree{}},
					"vhdl.js": &bintree{publicAceSrcMinSnippetsVhdlJs, map[string]*bintree{}},
					"wollok.js": &bintree{publicAceSrcMinSnippetsWollokJs, map[string]*bintree{}},
					"xml.js": &bintree{publicAceSrcMinSnippetsXmlJs, map[string]*bintree{}},
					"xquery.js": &bintree{publicAceSrcMinSnippetsXqueryJs, map[string]*bintree{}},
					"yaml.js": &bintree{publicAceSrcMinSnippetsYamlJs, map[string]*bintree{}},
				}},
				"theme-github.js": &bintree{publicAceSrcMinThemeGithubJs, map[string]*bintree{}},
				"worker-coffee.js": &bintree{publicAceSrcMinWorkerCoffeeJs, map[string]*bintree{}},
				"worker-css.js": &bintree{publicAceSrcMinWorkerCssJs, map[string]*bintree{}},
				"worker-html.js": &bintree{publicAceSrcMinWorkerHtmlJs, map[string]*bintree{}},
				"worker-javascript.js": &bintree{publicAceSrcMinWorkerJavascriptJs, map[string]*bintree{}},
				"worker-json.js": &bintree{publicAceSrcMinWorkerJsonJs, map[string]*bintree{}},
				"worker-lua.js": &bintree{publicAceSrcMinWorkerLuaJs, map[string]*bintree{}},
				"worker-php.js": &bintree{publicAceSrcMinWorkerPhpJs, map[string]*bintree{}},
				"worker-xml.js": &bintree{publicAceSrcMinWorkerXmlJs, map[string]*bintree{}},
				"worker-xquery.js": &bintree{publicAceSrcMinWorkerXqueryJs, map[string]*bintree{}},
			}},
		}},
		"css": &bintree{nil, map[string]*bintree{
			"fonts.css": &bintree{publicCssFontsCss, map[string]*bintree{}},
			"material": &bintree{nil, map[string]*bintree{
				"icons.woff2": &bintree{publicCssMaterialIconsWoff2, map[string]*bintree{}},
			}},
			"normalize.css": &bintree{publicCssNormalizeCss, map[string]*bintree{}},
			"roboto": &bintree{nil, map[string]*bintree{
				"medium-cyrillic-ext.woff2": &bintree{publicCssRobotoMediumCyrillicExtWoff2, map[string]*bintree{}},
				"medium-cyrillic.woff2": &bintree{publicCssRobotoMediumCyrillicWoff2, map[string]*bintree{}},
				"medium-greek-ext.woff2": &bintree{publicCssRobotoMediumGreekExtWoff2, map[string]*bintree{}},
				"medium-greek.woff2": &bintree{publicCssRobotoMediumGreekWoff2, map[string]*bintree{}},
				"medium-latin-ext.woff2": &bintree{publicCssRobotoMediumLatinExtWoff2, map[string]*bintree{}},
				"medium-latin.woff2": &bintree{publicCssRobotoMediumLatinWoff2, map[string]*bintree{}},
				"medium-vietnamese.woff2": &bintree{publicCssRobotoMediumVietnameseWoff2, map[string]*bintree{}},
				"normal-cyrillic-ext.woff2": &bintree{publicCssRobotoNormalCyrillicExtWoff2, map[string]*bintree{}},
				"normal-cyrillic.woff2": &bintree{publicCssRobotoNormalCyrillicWoff2, map[string]*bintree{}},
				"normal-greek-ext.woff2": &bintree{publicCssRobotoNormalGreekExtWoff2, map[string]*bintree{}},
				"normal-greek.woff2": &bintree{publicCssRobotoNormalGreekWoff2, map[string]*bintree{}},
				"normal-latin-ext.woff2": &bintree{publicCssRobotoNormalLatinExtWoff2, map[string]*bintree{}},
				"normal-latin.woff2": &bintree{publicCssRobotoNormalLatinWoff2, map[string]*bintree{}},
				"normal-vietnamese.woff2": &bintree{publicCssRobotoNormalVietnameseWoff2, map[string]*bintree{}},
			}},
			"styles.css": &bintree{publicCssStylesCss, map[string]*bintree{}},
		}},
		"js": &bintree{nil, map[string]*bintree{
			"common.js": &bintree{publicJsCommonJs, map[string]*bintree{}},
			"editor.js": &bintree{publicJsEditorJs, map[string]*bintree{}},
			"form2js.js": &bintree{publicJsForm2jsJs, map[string]*bintree{}},
			"listing.js": &bintree{publicJsListingJs, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"base.tmpl": &bintree{templatesBaseTmpl, map[string]*bintree{}},
		"editor.tmpl": &bintree{templatesEditorTmpl, map[string]*bintree{}},
		"frontmatter.tmpl": &bintree{templatesFrontmatterTmpl, map[string]*bintree{}},
		"listing.tmpl": &bintree{templatesListingTmpl, map[string]*bintree{}},
		"minimal.tmpl": &bintree{templatesMinimalTmpl, map[string]*bintree{}},
		"single.tmpl": &bintree{templatesSingleTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

